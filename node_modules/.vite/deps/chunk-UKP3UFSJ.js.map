{
  "version": 3,
  "sources": ["../../kepler.gl/src/actions/map-state-actions.js", "../../kepler.gl/src/actions/identity-actions.js", "../../kepler.gl/src/actions/index.js"],
  "sourcesContent": ["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from 'redux-actions';\nimport ActionTypes from 'constants/action-types';\n\n/**\n *\n * Toggle between 3d and 2d map.\n * @memberof mapStateActions\n * @public\n * @example\n * import {togglePerspective} from 'kepler.gl/actions';\n * this.props.dispatch(togglePerspective());\n */\nexport const togglePerspective = createAction(ActionTypes.TOGGLE_PERSPECTIVE);\n\n/**\n * Fit map viewport to bounds\n * @memberof mapStateActions\n * @param {Array<Number>} bounds as `[lngMin, latMin, lngMax, latMax]`\n * @public\n * @example\n * import {fitBounds} from 'kepler.gl/actions';\n * this.props.dispatch(fitBounds([-122.23, 37.127, -122.11, 37.456]));\n */\nexport const fitBounds = createAction(ActionTypes.FIT_BOUNDS, bounds => bounds);\n\n/**\n * Update map viewport\n * @memberof mapStateActions\n * @param {Object} viewport viewport object container one or any of these properties `width`, `height`, `latitude` `longitude`, `zoom`, `pitch`, `bearing`, `dragRotate`\n * @param {Number} [viewport.width] Width of viewport\n * @param {Number} [viewport.height] Height of viewport\n * @param {Number} [viewport.zoom] Zoom of viewport\n * @param {Number} [viewport.pitch] Camera angle in degrees (0 is straight down)\n * @param {Number} [viewport.bearing] Map rotation in degrees (0 means north is up)\n * @param {Number} [viewport.latitude] Latitude center of viewport on map in mercator projection\n * @param {Number} [viewport.longitude] Longitude Center of viewport on map in mercator projection\n * @param {boolean} [viewport.dragRotate] Whether to enable drag and rotate map into perspective viewport\n * @public\n * @example\n * import {updateMap} from 'kepler.gl/actions';\n * this.props.dispatch(updateMap({latitude: 37.75043, longitude: -122.34679, width: 800, height: 1200}));\n */\n\nexport const updateMap = createAction(ActionTypes.UPDATE_MAP, viewport => viewport);\n\n/**\n * Toggle between single map or split maps\n * @memberof mapStateActions\n * @param {Number} [index] index is provided, close split map at index\n * @public\n * @example\n * import {toggleSplitMap} from 'kepler.gl/actions';\n * this.props.dispatch(toggleSplitMap());\n */\nexport const toggleSplitMap = createAction(ActionTypes.TOGGLE_SPLIT_MAP, index => index);\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by  `mapState` reducer.\n * They manage map viewport update, toggle between 2d and 3d map,\n * toggle between single and split maps.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStateActions = null;\n/* eslint-enable no-unused-vars */\n", "// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from 'redux-actions';\nimport ActionTypes from 'constants/action-types';\n\n/**\n *\n * Add a new kepler.gl instance in `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **mounted** to the dom.\n * Note that if you dispatch actions such as adding data to a kepler.gl instance before the React component is mounted, the action will not be\n * performed. Instance reducer can only handle actions when it is instantiated.\n * @memberof rootActions\n * @param payload\n * @param payload.id - ***required** The id of the instance\n * @param payload.mint - Whether to use a fresh empty state, when `mint: true` it will *always* load a fresh state when the component is re-mounted.\n * When `mint: false` it will register with existing instance state under the same `id`, when the component is unmounted then mounted again. Default: `true`\n * @param payload.mapboxApiAccessToken - mapboxApiAccessToken to be saved in `map-style` reducer.\n * @param payload.mapboxApiUrl - mapboxApiUrl to be saved in `map-style` reducer.\n * @param payload.mapStylesReplaceDefault - mapStylesReplaceDefault to be saved in `map-style` reducer.\n * @param payload.initialUiState - initial ui state\n * @type {typeof import('./identity-actions').registerEntry}\n * @public\n */\nexport const registerEntry = createAction(ActionTypes.REGISTER_ENTRY, payload => payload);\n\n/**\n *\n * Delete an instance from `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **un-mounted** to the dom.\n * If `mint` is set to be `true` in the component prop, the instance state will be deleted from the root reducer. Otherwise, the root reducer will keep\n * the instance state and later transfer it to a newly mounted component with the same `id`\n * @memberof rootActions\n * @param {string} id - the id of the instance to be deleted\n * @public\n */\nexport const deleteEntry = createAction(ActionTypes.DELETE_ENTRY, id => id);\n\n/**\n *\n * Rename an instance in the root reducer, keep its entire state\n *\n * @memberof rootActions\n * @param {string} oldId - ***required** old id\n * @param {string} newId - ***required** new id\n * @public\n */\nexport const renameEntry = createAction(ActionTypes.RENAME_ENTRY, (oldId, newId) => ({\n  oldId,\n  newId\n}));\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Root actions managers adding and removing instances in root reducer.\n * Under-the-hood, when a `KeplerGl` component is mounted or unmounted,\n * it will automatically calls these actions to add itself to the root reducer.\n * However, sometimes the data is ready before the component is registered in the reducer,\n * in this case, you can manually call these actions or the corresponding updater to add it to the reducer.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst rootActions = null;\n/* eslint-enable no-unused-vars */\n", "// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Actions\nexport * from './actions';\n\n// kepler.gl actions accessible outside component\nexport * from './vis-state-actions';\nexport * from './ui-state-actions';\nexport * from './map-state-actions';\nexport * from './map-style-actions';\nexport * from './identity-actions';\nexport * from './provider-actions';\n\n// Dispatch\nexport {\n  _actionFor,\n  forwardTo,\n  getActionForwardAddress,\n  isForwardAction,\n  unwrap,\n  wrapTo\n} from './action-wrapper';\n\nexport {default as ActionTypes} from '../constants/action-types';\n"],
  "mappings": "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",
  "names": ["togglePerspective", "ActionTypes", "TOGGLE_PERSPECTIVE", "fitBounds", "FIT_BOUNDS", "bounds", "updateMap", "UPDATE_MAP", "viewport", "toggleSplitMap", "TOGGLE_SPLIT_MAP", "index", "registerEntry", "ActionTypes", "REGISTER_ENTRY", "payload", "deleteEntry", "DELETE_ENTRY", "id", "renameEntry", "RENAME_ENTRY", "oldId", "newId"]
}
