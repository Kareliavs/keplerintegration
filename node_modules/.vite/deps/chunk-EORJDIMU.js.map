{
  "version": 3,
  "sources": ["../../@deck.gl/react/src/utils/inherits-from.js", "../../@deck.gl/react/src/utils/extract-jsx-layers.js", "../../@deck.gl/react/src/utils/evaluate-children.js", "../../@deck.gl/react/src/utils/position-children-under-views.js", "../../@deck.gl/react/src/utils/extract-styles.js", "../../@deck.gl/react/src/deckgl.js", "../../@deck.gl/react/src/index.js"],
  "sourcesContent": ["// Check if one JavaScript class inherits from another\nexport function inheritsFrom(Type, ParentType) {\n  while (Type) {\n    if (Type === ParentType) {\n      return true;\n    }\n    Type = Object.getPrototypeOf(Type);\n  }\n  return false;\n}\n", "import React, {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n  if (!node) {\n    return node;\n  }\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (node.type === React.Fragment) {\n    return wrapInView(node.props.children);\n  }\n  if (inheritsFrom(node.type, View)) {\n    return node;\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({children, layers, views}) {\n  const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (reactElement) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  return new LayerType(props);\n}\n", "import {cloneElement} from 'react';\n\nconst MAP_STYLE = {position: 'absolute', zIndex: -1};\n\nexport default function evaluateChildren(children, childProps) {\n  if (!children) {\n    return children;\n  }\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n\n  // Special treatment for react-map-gl's Map component\n  // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n  if (isReactMap(children)) {\n    // Place map under the canvas\n    childProps.style = MAP_STYLE;\n    return cloneElement(children, childProps);\n  }\n  if (needsDeckGLViewProps(children)) {\n    return cloneElement(children, childProps);\n  }\n  return children;\n}\n\nfunction isReactMap(child) {\n  const componentClass = child && child.type;\n  const componentProps = componentClass && componentClass.defaultProps;\n  return componentProps && componentProps.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child) {\n  const componentClass = child && child.type;\n  return componentClass && componentClass.deckGLViewProps;\n}\n", "import {createElement} from 'react';\nimport {View} from '@deck.gl/core';\nimport {inheritsFrom} from './inherits-from';\nimport evaluateChildren from './evaluate-children';\n\n// Iterate over views and reposition children associated with views\n// TODO - Can we supply a similar function for the non-React case?\nexport default function positionChildrenUnderViews({children, viewports, deck, ContextProvider}) {\n  const {viewManager} = deck || {};\n\n  if (!viewManager || !viewManager.views.length) {\n    return [];\n  }\n\n  const views = {};\n  const defaultViewId = viewManager.views[0].id;\n\n  // Sort children by view id\n  for (const child of children) {\n    // Unless child is a View, position / render as part of the default view\n    let viewId = defaultViewId;\n    let viewChildren = child;\n\n    if (inheritsFrom(child.type, View)) {\n      viewId = child.props.id || defaultViewId;\n      viewChildren = child.props.children;\n    }\n\n    const viewport = viewManager.getViewport(viewId);\n    const viewState = viewManager.getViewState(viewId);\n\n    // Drop (auto-hide) elements with viewId that are not matched by any current view\n    if (viewport) {\n      const {x, y, width, height} = viewport;\n      // Resolve potentially relative dimensions using the deck.gl container size\n      viewChildren = evaluateChildren(viewChildren, {\n        x,\n        y,\n        width,\n        height,\n        viewport,\n        viewState\n      });\n\n      if (!views[viewId]) {\n        views[viewId] = {\n          viewport,\n          children: []\n        };\n      }\n      views[viewId].children.push(viewChildren);\n    }\n  }\n\n  // Render views\n  return Object.keys(views).map(viewId => {\n    const {viewport, children: viewChildren} = views[viewId];\n    const {x, y, width, height} = viewport;\n    const style = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height\n    };\n\n    const key = `view-${viewId}`;\n    // If children is passed as an array, React will throw the \"each element in a list needs\n    // a key\" warning. Sending each child as separate arguments removes this requirement.\n    const viewElement = createElement('div', {key, id: key, style}, ...viewChildren);\n\n    if (ContextProvider) {\n      const contextValue = {\n        viewport,\n        container: deck.canvas.offsetParent,\n        eventManager: deck.eventManager,\n        onViewStateChange: params => {\n          params.viewId = viewId;\n          deck._onViewStateChange(params);\n        }\n      };\n      return createElement(ContextProvider, {key, value: contextValue}, viewElement);\n    }\n\n    return viewElement;\n  });\n}\n", "const CANVAS_ONLY_STYLES = {\n  mixBlendMode: null\n};\n\nexport default function extractStyles({width, height, style}) {\n  // This styling is enforced for correct positioning with children\n  const containerStyle = {\n    position: 'absolute',\n    zIndex: 0,\n    left: 0,\n    top: 0,\n    width,\n    height\n  };\n\n  // Fill the container\n  const canvasStyle = {\n    left: 0,\n    top: 0\n  };\n\n  if (style) {\n    for (const key in style) {\n      if (key in CANVAS_ONLY_STYLES) {\n        // apply style to the canvas, but not deck's children, e.g. mix-blend-mode\n        canvasStyle[key] = style[key];\n      } else {\n        // apply style to the container, e.g. position/flow settings\n        containerStyle[key] = style[key];\n      }\n    }\n  }\n\n  return {containerStyle, canvasStyle};\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {createElement} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck, _memoize as memoize} from '@deck.gl/core';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nconst propTypes = Deck.getPropTypes(PropTypes);\n\nconst defaultProps = Deck.defaultProps;\n\nexport default class DeckGL extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.viewports = null;\n    this.children = null;\n\n    // The redraw flag of deck\n    this._needsRedraw = null;\n\n    // Refs\n    this._containerRef = React.createRef();\n    this._canvasRef = React.createRef();\n\n    // Bind public methods\n    this.pickObject = this.pickObject.bind(this);\n    this.pickMultipleObjects = this.pickMultipleObjects.bind(this);\n    this.pickObjects = this.pickObjects.bind(this);\n\n    // Memoized functions\n    this._extractJSXLayers = memoize(extractJSXLayers);\n    this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    this._extractStyles = memoize(extractStyles);\n  }\n\n  componentDidMount() {\n    // Allows a subclass of Deck to be used\n    // TODO - update propTypes / defaultProps?\n    const DeckClass = this.props.Deck || Deck;\n\n    // DEVTOOLS can cause this to be called twice\n    this.deck =\n      this.deck ||\n      new DeckClass(\n        Object.assign({}, this.props, {\n          parent: this._containerRef.current,\n          canvas: this._canvasRef.current,\n          style: null,\n          width: '100%',\n          height: '100%',\n          // The Deck's animation loop is independent from React's render cycle, causing potential\n          // synchronization issues. We provide this custom render function to make sure that React\n          // and Deck update on the same schedule.\n          _customRender: this._customRender.bind(this)\n        })\n      );\n    this._updateFromProps(this.props);\n  }\n\n  // This method checks if React needs to call `render`.\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL context - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL context and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  shouldComponentUpdate(nextProps) {\n    // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n    // the next animation frame.\n    this._updateFromProps(nextProps);\n\n    // If the child components have changed, React needs to rerender (case 2 or 3)\n    const childrenChanged = this.children !== this._parseJSX(nextProps).children;\n    // If the views have changed, both React and WebGL context need update (case 3)\n    const viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n\n    // Only call `render` right away in case 2\n    return childrenChanged && !viewsChanged;\n  }\n\n  componentDidUpdate() {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    this._redrawDeck();\n  }\n\n  componentWillUnmount() {\n    this.deck.finalize();\n  }\n\n  // Public API\n\n  pickObject(opts) {\n    return this.deck.pickObject(opts);\n  }\n\n  pickMultipleObjects(opts) {\n    return this.deck.pickMultipleObjects(opts);\n  }\n\n  pickObjects(opts) {\n    return this.deck.pickObjects(opts);\n  }\n\n  // Callbacks\n  _redrawDeck() {\n    if (this._needsRedraw) {\n      // Only redraw it we have received a dirty flag\n      this.deck._drawLayers(this._needsRedraw);\n      this._needsRedraw = null;\n    }\n  }\n\n  _customRender(redrawReason) {\n    // Save the dirty flag for later\n    this._needsRedraw = redrawReason;\n\n    // Viewport/view state is passed to child components as props.\n    // If they have changed, we need to trigger a React rerender to update children props.\n    const viewports = this.deck.viewManager.getViewports();\n    if (viewports !== this.viewports) {\n      // Viewports have changed, update children props first.\n      // This will delay the Deck canvas redraw till after React update (in componentDidUpdate)\n      // so that the canvas does not get rendered before the child components update.\n      this.forceUpdate();\n    } else {\n      this._redrawDeck();\n    }\n  }\n\n  // Private Helpers\n\n  _parseJSX(props) {\n    return this._extractJSXLayers({\n      layers: props.layers,\n      views: props.views,\n      children: props.children\n    });\n  }\n\n  // 1. Extract any JSX layers from the react children\n  // 2. Handle any backwards compatiblity props for React layer\n  // Needs to be called both from initial mount, and when new props are received\n  _updateFromProps(props) {\n    // extract any deck.gl layers masquerading as react elements from props.children\n    const {layers, views} = this._parseJSX(props);\n    const deckProps = Object.assign({}, props, {\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      layers,\n      views\n    });\n\n    this.deck.setProps(deckProps);\n  }\n\n  render() {\n    const {ContextProvider, width, height, style} = this.props;\n    // Save the viewports and children used for this render\n    const {viewManager} = this.deck || {};\n    this.viewports = viewManager && viewManager.getViewports();\n    this.children = this._parseJSX(this.props).children;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const children = this._positionChildrenUnderViews({\n      children: this.children,\n      viewports: this.viewports,\n      deck: this.deck,\n      ContextProvider\n    });\n\n    const {containerStyle, canvasStyle} = this._extractStyles({width, height, style});\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      ref: this._canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    return createElement(\n      'div',\n      {id: 'deckgl-wrapper', ref: this._containerRef, style: containerStyle},\n      [canvas, children]\n    );\n  }\n}\n\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport {default as DeckGL} from './deckgl';\nexport {default} from './deckgl';\n"],
  "mappings": "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",
  "names": ["inheritsFrom", "Type", "ParentType", "Object", "getPrototypeOf", "wrapInView", "node", "createElement", "View", "Array", "isArray", "map", "type", "React", "Fragment", "props", "children", "inheritsFrom", "layers", "views", "reactChildren", "jsxLayers", "jsxViews", "Children", "forEach", "reactElement", "ElementType", "Layer", "layer", "createLayer", "push", "id", "view", "Object", "keys", "length", "values", "LayerType", "reactProps", "defaultProps", "key", "children", "childProps", "Array", "isArray", "map", "child", "evaluateChildren", "isReactMap", "style", "MAP_STYLE", "cloneElement", "needsDeckGLViewProps", "componentClass", "type", "componentProps", "defaultProps", "mapStyle", "deckGLViewProps", "import_react", "position", "zIndex", "children", "viewports", "deck", "ContextProvider", "viewManager", "views", "length", "defaultViewId", "id", "child", "viewId", "viewChildren", "inheritsFrom", "type", "View", "props", "viewport", "getViewport", "viewState", "getViewState", "x", "y", "width", "height", "evaluateChildren", "push", "Object", "keys", "map", "style", "position", "left", "top", "key", "viewElement", "createElement", "contextValue", "container", "canvas", "offsetParent", "eventManager", "onViewStateChange", "params", "_onViewStateChange", "value", "import_react", "width", "height", "style", "containerStyle", "position", "zIndex", "left", "top", "canvasStyle", "key", "CANVAS_ONLY_STYLES", "mixBlendMode", "import_react", "propTypes", "defaultProps", "DeckGL", "Deck", "getPropTypes", "PropTypes", "props", "viewports", "children", "_needsRedraw", "_containerRef", "React", "createRef", "_canvasRef", "pickObject", "bind", "pickMultipleObjects", "pickObjects", "_extractJSXLayers", "memoize", "extractJSXLayers", "_positionChildrenUnderViews", "positionChildrenUnderViews", "_extractStyles", "extractStyles", "DeckClass", "deck", "Object", "assign", "parent", "current", "canvas", "style", "width", "height", "_customRender", "_updateFromProps", "nextProps", "childrenChanged", "_parseJSX", "viewsChanged", "viewManager", "needsRedraw", "_redrawDeck", "finalize", "opts", "_drawLayers", "redrawReason", "getViewports", "forceUpdate", "layers", "views", "deckProps", "setProps", "ContextProvider", "containerStyle", "canvasStyle", "createElement", "key", "ref", "id", "Component", "init_esm"]
}
