import {
  require_prop_types
} from "./chunk-DAYKXJCD.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  Deck,
  Layer,
  View,
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn,
  _toConsumableArray,
  init_assertThisInitialized,
  init_classCallCheck,
  init_createClass,
  init_esm12 as init_esm,
  init_getPrototypeOf,
  init_inherits,
  init_possibleConstructorReturn,
  init_toConsumableArray,
  memoize
} from "./chunk-5T2OUC3W.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/@deck.gl/react/dist/esm/utils/inherits-from.js
function inheritsFrom(Type, ParentType) {
  while (Type) {
    if (Type === ParentType) {
      return true;
    }
    Type = Object.getPrototypeOf(Type);
  }
  return false;
}
var init_inherits_from = __esm({
  "node_modules/@deck.gl/react/dist/esm/utils/inherits-from.js"() {
  }
});

// node_modules/@deck.gl/react/dist/esm/utils/extract-jsx-layers.js
function wrapInView(node) {
  if (!node) {
    return node;
  }
  if (typeof node === "function") {
    return (0, import_react.createElement)(View, {}, node);
  }
  if (Array.isArray(node)) {
    return node.map(wrapInView);
  }
  if (node.type === import_react.default.Fragment) {
    return wrapInView(node.props.children);
  }
  if (inheritsFrom(node.type, View)) {
    return node;
  }
  return node;
}
function extractJSXLayers(_ref) {
  var children = _ref.children, layers = _ref.layers, views = _ref.views;
  var reactChildren = [];
  var jsxLayers = [];
  var jsxViews = {};
  import_react.default.Children.forEach(wrapInView(children), function(reactElement) {
    if (reactElement) {
      var ElementType = reactElement.type;
      if (inheritsFrom(ElementType, Layer)) {
        var layer = createLayer(ElementType, reactElement.props);
        jsxLayers.push(layer);
      } else {
        reactChildren.push(reactElement);
      }
      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {
        var view = new ElementType(reactElement.props);
        jsxViews[view.id] = view;
      }
    }
  });
  if (Object.keys(jsxViews).length > 0) {
    if (Array.isArray(views)) {
      views.forEach(function(view) {
        jsxViews[view.id] = view;
      });
    } else if (views) {
      jsxViews[views.id] = views;
    }
    views = Object.values(jsxViews);
  }
  layers = jsxLayers.length > 0 ? [].concat(jsxLayers, _toConsumableArray(layers)) : layers;
  return {
    layers,
    children: reactChildren,
    views
  };
}
function createLayer(LayerType, reactProps) {
  var props = {};
  var defaultProps2 = LayerType.defaultProps || {};
  for (var key in reactProps) {
    if (defaultProps2[key] !== reactProps[key]) {
      props[key] = reactProps[key];
    }
  }
  return new LayerType(props);
}
var import_react;
var init_extract_jsx_layers = __esm({
  "node_modules/@deck.gl/react/dist/esm/utils/extract-jsx-layers.js"() {
    init_toConsumableArray();
    import_react = __toESM(require_react());
    init_inherits_from();
    init_esm();
  }
});

// node_modules/@deck.gl/react/dist/esm/utils/evaluate-children.js
function evaluateChildren(children, childProps) {
  if (!children) {
    return children;
  }
  if (typeof children === "function") {
    return children(childProps);
  }
  if (Array.isArray(children)) {
    return children.map(function(child) {
      return evaluateChildren(child, childProps);
    });
  }
  if (isReactMap(children)) {
    childProps.style = MAP_STYLE;
    return (0, import_react2.cloneElement)(children, childProps);
  }
  if (needsDeckGLViewProps(children)) {
    return (0, import_react2.cloneElement)(children, childProps);
  }
  return children;
}
function isReactMap(child) {
  var componentClass = child && child.type;
  var componentProps = componentClass && componentClass.defaultProps;
  return componentProps && componentProps.mapStyle;
}
function needsDeckGLViewProps(child) {
  var componentClass = child && child.type;
  return componentClass && componentClass.deckGLViewProps;
}
var import_react2, MAP_STYLE;
var init_evaluate_children = __esm({
  "node_modules/@deck.gl/react/dist/esm/utils/evaluate-children.js"() {
    import_react2 = __toESM(require_react());
    MAP_STYLE = {
      position: "absolute",
      zIndex: -1
    };
  }
});

// node_modules/@deck.gl/react/dist/esm/utils/position-children-under-views.js
function positionChildrenUnderViews(_ref) {
  var children = _ref.children, viewports = _ref.viewports, deck = _ref.deck, ContextProvider = _ref.ContextProvider;
  var _ref2 = deck || {}, viewManager = _ref2.viewManager;
  if (!viewManager || !viewManager.views.length) {
    return [];
  }
  var views = {};
  var defaultViewId = viewManager.views[0].id;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = void 0;
  try {
    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var child = _step.value;
      var viewId = defaultViewId;
      var viewChildren = child;
      if (inheritsFrom(child.type, View)) {
        viewId = child.props.id || defaultViewId;
        viewChildren = child.props.children;
      }
      var viewport = viewManager.getViewport(viewId);
      var viewState = viewManager.getViewState(viewId);
      if (viewport) {
        var x = viewport.x, y = viewport.y, width = viewport.width, height = viewport.height;
        viewChildren = evaluateChildren(viewChildren, {
          x,
          y,
          width,
          height,
          viewport,
          viewState
        });
        if (!views[viewId]) {
          views[viewId] = {
            viewport,
            children: []
          };
        }
        views[viewId].children.push(viewChildren);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
  return Object.keys(views).map(function(viewId2) {
    var _views$viewId = views[viewId2], viewport2 = _views$viewId.viewport, viewChildren2 = _views$viewId.children;
    var x2 = viewport2.x, y2 = viewport2.y, width2 = viewport2.width, height2 = viewport2.height;
    var style = {
      position: "absolute",
      left: x2,
      top: y2,
      width: width2,
      height: height2
    };
    var key = "view-".concat(viewId2);
    var viewElement = import_react3.createElement.apply(void 0, ["div", {
      key,
      id: key,
      style
    }].concat(_toConsumableArray(viewChildren2)));
    if (ContextProvider) {
      var contextValue = {
        viewport: viewport2,
        container: deck.canvas.offsetParent,
        eventManager: deck.eventManager,
        onViewStateChange: function onViewStateChange(params) {
          params.viewId = viewId2;
          deck._onViewStateChange(params);
        }
      };
      return (0, import_react3.createElement)(ContextProvider, {
        key,
        value: contextValue
      }, viewElement);
    }
    return viewElement;
  });
}
var import_react3;
var init_position_children_under_views = __esm({
  "node_modules/@deck.gl/react/dist/esm/utils/position-children-under-views.js"() {
    init_toConsumableArray();
    import_react3 = __toESM(require_react());
    init_esm();
    init_inherits_from();
    init_evaluate_children();
  }
});

// node_modules/@deck.gl/react/dist/esm/utils/extract-styles.js
function extractStyles(_ref) {
  var width = _ref.width, height = _ref.height, style = _ref.style;
  var containerStyle = {
    position: "absolute",
    zIndex: 0,
    left: 0,
    top: 0,
    width,
    height
  };
  var canvasStyle = {
    left: 0,
    top: 0
  };
  if (style) {
    for (var key in style) {
      if (key in CANVAS_ONLY_STYLES) {
        canvasStyle[key] = style[key];
      } else {
        containerStyle[key] = style[key];
      }
    }
  }
  return {
    containerStyle,
    canvasStyle
  };
}
var CANVAS_ONLY_STYLES;
var init_extract_styles = __esm({
  "node_modules/@deck.gl/react/dist/esm/utils/extract-styles.js"() {
    CANVAS_ONLY_STYLES = {
      mixBlendMode: null
    };
  }
});

// node_modules/@deck.gl/react/dist/esm/deckgl.js
var import_react4, import_prop_types, propTypes, defaultProps, DeckGL;
var init_deckgl = __esm({
  "node_modules/@deck.gl/react/dist/esm/deckgl.js"() {
    init_classCallCheck();
    init_createClass();
    init_possibleConstructorReturn();
    init_getPrototypeOf();
    init_assertThisInitialized();
    init_inherits();
    import_react4 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_esm();
    init_extract_jsx_layers();
    init_position_children_under_views();
    init_extract_styles();
    propTypes = Deck.getPropTypes(import_prop_types.default);
    defaultProps = Deck.defaultProps;
    DeckGL = function(_React$Component) {
      _inherits(DeckGL2, _React$Component);
      function DeckGL2(props) {
        var _this;
        _classCallCheck(this, DeckGL2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(DeckGL2).call(this, props));
        _this.viewports = null;
        _this.children = null;
        _this._needsRedraw = null;
        _this._containerRef = import_react4.default.createRef();
        _this._canvasRef = import_react4.default.createRef();
        _this.pickObject = _this.pickObject.bind(_assertThisInitialized(_this));
        _this.pickMultipleObjects = _this.pickMultipleObjects.bind(_assertThisInitialized(_this));
        _this.pickObjects = _this.pickObjects.bind(_assertThisInitialized(_this));
        _this._extractJSXLayers = memoize(extractJSXLayers);
        _this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);
        _this._extractStyles = memoize(extractStyles);
        return _this;
      }
      _createClass(DeckGL2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var DeckClass = this.props.Deck || Deck;
          this.deck = this.deck || new DeckClass(Object.assign({}, this.props, {
            parent: this._containerRef.current,
            canvas: this._canvasRef.current,
            style: null,
            width: "100%",
            height: "100%",
            _customRender: this._customRender.bind(this)
          }));
          this._updateFromProps(this.props);
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
          this._updateFromProps(nextProps);
          var childrenChanged = this.children !== this._parseJSX(nextProps).children;
          var viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();
          return childrenChanged && !viewsChanged;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this._redrawDeck();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.deck.finalize();
        }
      }, {
        key: "pickObject",
        value: function pickObject(opts) {
          return this.deck.pickObject(opts);
        }
      }, {
        key: "pickMultipleObjects",
        value: function pickMultipleObjects(opts) {
          return this.deck.pickMultipleObjects(opts);
        }
      }, {
        key: "pickObjects",
        value: function pickObjects(opts) {
          return this.deck.pickObjects(opts);
        }
      }, {
        key: "_redrawDeck",
        value: function _redrawDeck() {
          if (this._needsRedraw) {
            this.deck._drawLayers(this._needsRedraw);
            this._needsRedraw = null;
          }
        }
      }, {
        key: "_customRender",
        value: function _customRender(redrawReason) {
          this._needsRedraw = redrawReason;
          var viewports = this.deck.viewManager.getViewports();
          if (viewports !== this.viewports) {
            this.forceUpdate();
          } else {
            this._redrawDeck();
          }
        }
      }, {
        key: "_parseJSX",
        value: function _parseJSX(props) {
          return this._extractJSXLayers({
            layers: props.layers,
            views: props.views,
            children: props.children
          });
        }
      }, {
        key: "_updateFromProps",
        value: function _updateFromProps(props) {
          var _this$_parseJSX = this._parseJSX(props), layers = _this$_parseJSX.layers, views = _this$_parseJSX.views;
          var deckProps = Object.assign({}, props, {
            style: null,
            width: "100%",
            height: "100%",
            layers,
            views
          });
          this.deck.setProps(deckProps);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, ContextProvider = _this$props.ContextProvider, width = _this$props.width, height = _this$props.height, style = _this$props.style;
          var _ref = this.deck || {}, viewManager = _ref.viewManager;
          this.viewports = viewManager && viewManager.getViewports();
          this.children = this._parseJSX(this.props).children;
          var children = this._positionChildrenUnderViews({
            children: this.children,
            viewports: this.viewports,
            deck: this.deck,
            ContextProvider
          });
          var _this$_extractStyles = this._extractStyles({
            width,
            height,
            style
          }), containerStyle = _this$_extractStyles.containerStyle, canvasStyle = _this$_extractStyles.canvasStyle;
          var canvas = (0, import_react4.createElement)("canvas", {
            key: "canvas",
            ref: this._canvasRef,
            style: canvasStyle
          });
          return (0, import_react4.createElement)("div", {
            id: "deckgl-wrapper",
            ref: this._containerRef,
            style: containerStyle
          }, [canvas, children]);
        }
      }]);
      return DeckGL2;
    }(import_react4.default.Component);
    DeckGL.propTypes = propTypes;
    DeckGL.defaultProps = defaultProps;
  }
});

// node_modules/@deck.gl/react/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DeckGL: () => DeckGL,
  default: () => DeckGL
});
var init_esm2 = __esm({
  "node_modules/@deck.gl/react/dist/esm/index.js"() {
    init_deckgl();
    init_deckgl();
  }
});

export {
  DeckGL,
  esm_exports,
  init_esm2 as init_esm
};
//# sourceMappingURL=chunk-EORJDIMU.js.map
