import {
  require_typeof
} from "./chunk-CE2QQUBF.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/kepler.gl/dist/constants/action-types.js
var require_action_types = __commonJS({
  "node_modules/kepler.gl/dist/constants/action-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = exports.ACTION_PREFIX = void 0;
    var ACTION_PREFIX = "@@kepler.gl/";
    exports.ACTION_PREFIX = ACTION_PREFIX;
    var ActionTypes = {
      // identity action
      REGISTER_ENTRY: "".concat(ACTION_PREFIX, "REGISTER_ENTRY"),
      DELETE_ENTRY: "".concat(ACTION_PREFIX, "DELETE_ENTRY"),
      RENAME_ENTRY: "".concat(ACTION_PREFIX, "RENAME_ENTRY"),
      // visState
      ADD_DATA: "".concat(ACTION_PREFIX, "ADD_DATA"),
      ADD_FILTER: "".concat(ACTION_PREFIX, "ADD_FILTER"),
      ADD_LAYER: "".concat(ACTION_PREFIX, "ADD_LAYER"),
      DUPLICATE_LAYER: "".concat(ACTION_PREFIX, "DUPLICATE_LAYER"),
      INTERACTION_CONFIG_CHANGE: "".concat(ACTION_PREFIX, "INTERACTION_CONFIG_CHANGE"),
      LAYER_CONFIG_CHANGE: "".concat(ACTION_PREFIX, "LAYER_CONFIG_CHANGE"),
      LAYER_VISUAL_CHANNEL_CHANGE: "".concat(ACTION_PREFIX, "LAYER_VISUAL_CHANNEL_CHANGE"),
      LAYER_TYPE_CHANGE: "".concat(ACTION_PREFIX, "LAYER_TYPE_CHANGE"),
      LAYER_VIS_CONFIG_CHANGE: "".concat(ACTION_PREFIX, "LAYER_VIS_CONFIG_CHANGE"),
      LAYER_TEXT_LABEL_CHANGE: "".concat(ACTION_PREFIX, "LAYER_TEXT_LABEL_CHANGE"),
      LAYER_HOVER: "".concat(ACTION_PREFIX, "LAYER_HOVER"),
      LAYER_CLICK: "".concat(ACTION_PREFIX, "LAYER_CLICK"),
      MAP_CLICK: "".concat(ACTION_PREFIX, "MAP_CLICK"),
      MOUSE_MOVE: "".concat(ACTION_PREFIX, "MOUSE_MOVE"),
      REMOVE_FILTER: "".concat(ACTION_PREFIX, "REMOVE_FILTER"),
      REMOVE_LAYER: "".concat(ACTION_PREFIX, "REMOVE_LAYER"),
      REMOVE_DATASET: "".concat(ACTION_PREFIX, "REMOVE_DATASET"),
      REORDER_LAYER: "".concat(ACTION_PREFIX, "REORDER_LAYER"),
      SET_FILTER: "".concat(ACTION_PREFIX, "SET_FILTER"),
      SET_FILTER_ANIMATION_TIME: "".concat(ACTION_PREFIX, "SET_FILTER_ANIMATION_TIME"),
      SET_FILTER_ANIMATION_TIME_CONFIG: "".concat(ACTION_PREFIX, "SET_FILTER_ANIMATION_TIME_CONFIG"),
      SET_FILTER_ANIMATION_WINDOW: "".concat(ACTION_PREFIX, "SET_FILTER_ANIMATION_WINDOW"),
      SHOW_DATASET_TABLE: "".concat(ACTION_PREFIX, "SHOW_DATASET_TABLE"),
      UPDATE_LAYER_BLENDING: "".concat(ACTION_PREFIX, "UPDATE_LAYER_BLENDING"),
      UPDATE_VIS_DATA: "".concat(ACTION_PREFIX, "UPDATE_VIS_DATA"),
      RENAME_DATASET: "".concat(ACTION_PREFIX, "RENAME_DATASET"),
      TOGGLE_FILTER_ANIMATION: "".concat(ACTION_PREFIX, "TOGGLE_FILTER_ANIMATION"),
      UPDATE_FILTER_ANIMATION_SPEED: "".concat(ACTION_PREFIX, "UPDATE_FILTER_ANIMATION_SPEED"),
      PLAY_ANIMATION: "".concat(ACTION_PREFIX, "PLAY_ANIMATION"),
      SET_LAYER_ANIMATION_TIME: "".concat(ACTION_PREFIX, "SET_LAYER_ANIMATION_TIME"),
      SET_LAYER_ANIMATION_TIME_CONFIG: "".concat(ACTION_PREFIX, "SET_LAYER_ANIMATION_TIME_CONFIG"),
      UPDATE_ANIMATION_SPEED: "".concat(ACTION_PREFIX, "UPDATE_ANIMATION_SPEED"),
      UPDATE_LAYER_ANIMATION_SPEED: "".concat(ACTION_PREFIX, "UPDATE_LAYER_ANIMATION_SPEED"),
      TOGGLE_LAYER_ANIMATION: "".concat(ACTION_PREFIX, "TOGGLE_LAYER_ANIMATION"),
      TOGGLE_LAYER_ANIMATION_CONTROL: "".concat(ACTION_PREFIX, "TOGGLE_LAYER_ANIMATION_CONTROL"),
      TOGGLE_LAYER_CONFIG_ACTIVE: "".concat(ACTION_PREFIX, "TOGGLE_LAYER_CONFIG_ACTIVE"),
      ENLARGE_FILTER: "".concat(ACTION_PREFIX, "ENLARGE_FILTER"),
      TOGGLE_FILTER_FEATURE: "".concat(ACTION_PREFIX, "TOGGLE_FILTER_FEATURE"),
      TOGGLE_LAYER_FOR_MAP: "".concat(ACTION_PREFIX, "TOGGLE_LAYER_FOR_MAP"),
      SET_FILTER_PLOT: "".concat(ACTION_PREFIX, "SET_FILTER_PLOT"),
      LOAD_FILES: "".concat(ACTION_PREFIX, "LOAD_FILES"),
      LOAD_NEXT_FILE: "".concat(ACTION_PREFIX, "LOAD_NEXT_FILE"),
      LOAD_FILE_STEP_SUCCESS: "".concat(ACTION_PREFIX, "LOAD_FILE_STEP_SUCCESS"),
      LOAD_FILES_ERR: "".concat(ACTION_PREFIX, "LOAD_FILES_ERR"),
      LOAD_FILES_SUCCESS: "".concat(ACTION_PREFIX, "LOAD_FILES_SUCCESS"),
      LAYER_COLOR_UI_CHANGE: "".concat(ACTION_PREFIX, "LAYER_COLOR_UI_CHANGE"),
      TOGGLE_FEATURE_LAYER: "".concat(ACTION_PREFIX, "TOGGLE_FEATURE_LAYER"),
      APPLY_CPU_FILTER: "".concat(ACTION_PREFIX, "APPLY_CPU_FILTER"),
      SET_MAP_INFO: "".concat(ACTION_PREFIX, "SET_MAP_INFO"),
      SORT_TABLE_COLUMN: "".concat(ACTION_PREFIX, "SORT_TABLE_COLUMN"),
      PIN_TABLE_COLUMN: "".concat(ACTION_PREFIX, "PIN_TABLE_COLUMN"),
      COPY_TABLE_COLUMN: "".concat(ACTION_PREFIX, "COPY_TABLE_COLUMN"),
      NEXT_FILE_BATCH: "".concat(ACTION_PREFIX, "NEXT_FILE_BATCH"),
      PROCESS_FILE_CONTENT: "".concat(ACTION_PREFIX, "PROCESS_FILE_CONTENT"),
      // mapState
      UPDATE_MAP: "".concat(ACTION_PREFIX, "UPDATE_MAP"),
      FIT_BOUNDS: "".concat(ACTION_PREFIX, "FIT_BOUNDS"),
      TOGGLE_PERSPECTIVE: "".concat(ACTION_PREFIX, "TOGGLE_PERSPECTIVE"),
      TOGGLE_SPLIT_MAP: "".concat(ACTION_PREFIX, "TOGGLE_SPLIT_MAP"),
      TOGGLE_FULLSCREEN: "".concat(ACTION_PREFIX, "TOGGLE_FULLSCREEN"),
      // mapStyle
      MAP_CONFIG_CHANGE: "".concat(ACTION_PREFIX, "MAP_CONFIG_CHANGE"),
      SET_DEFAULT_MAP_STYLE: "".concat(ACTION_PREFIX, "SET_DEFAULT_MAP_STYLE"),
      MAP_STYLE_CHANGE: "".concat(ACTION_PREFIX, "MAP_STYLE_CHANGE"),
      LOAD_MAP_STYLES: "".concat(ACTION_PREFIX, "LOAD_MAP_STYLES"),
      LOAD_MAP_STYLE_ERR: "".concat(ACTION_PREFIX, "LOAD_MAP_STYLE_ERR"),
      INPUT_MAP_STYLE: "".concat(ACTION_PREFIX, "INPUT_MAP_STYLE"),
      LOAD_CUSTOM_MAP_STYLE: "".concat(ACTION_PREFIX, "LOAD_CUSTOM_MAP_STYLE"),
      ADD_CUSTOM_MAP_STYLE: "".concat(ACTION_PREFIX, "ADD_CUSTOM_MAP_STYLE"),
      REQUEST_MAP_STYLES: "".concat(ACTION_PREFIX, "REQUEST_MAP_STYLES"),
      SET_3D_BUILDING_COLOR: "".concat(ACTION_PREFIX, "SET_3D_BUILDING_COLOR"),
      // uiState
      TOGGLE_SIDE_PANEL: "".concat(ACTION_PREFIX, "TOGGLE_SIDE_PANEL"),
      TOGGLE_MODAL: "".concat(ACTION_PREFIX, "TOGGLE_MODAL"),
      SHOW_EXPORT_DROPDOWN: "".concat(ACTION_PREFIX, "SHOW_EXPORT_DROPDOWN"),
      HIDE_EXPORT_DROPDOWN: "".concat(ACTION_PREFIX, "HIDE_EXPORT_DROPDOWN"),
      OPEN_DELETE_MODAL: "".concat(ACTION_PREFIX, "OPEN_DELETE_MODAL"),
      TOGGLE_MAP_CONTROL: "".concat(ACTION_PREFIX, "TOGGLE_MAP_CONTROL"),
      SET_MAP_CONTROL_VISIBILITY: "".concat(ACTION_PREFIX, "SET_MAP_CONTROL_VISIBILITY"),
      ADD_NOTIFICATION: "".concat(ACTION_PREFIX, "ADD_NOTIFICATION"),
      REMOVE_NOTIFICATION: "".concat(ACTION_PREFIX, "REMOVE_NOTIFICATION"),
      SET_LOCALE: "".concat(ACTION_PREFIX, "SET_LOCALE"),
      // uiState > export image
      SET_EXPORT_IMAGE_SETTING: "".concat(ACTION_PREFIX, "SET_EXPORT_IMAGE_SETTING"),
      START_EXPORTING_IMAGE: "".concat(ACTION_PREFIX, "START_EXPORTING_IMAGE"),
      SET_EXPORT_IMAGE_DATA_URI: "".concat(ACTION_PREFIX, "SET_EXPORT_IMAGE_DATA_URI"),
      SET_EXPORT_IMAGE_ERROR: "".concat(ACTION_PREFIX, "SET_EXPORT_IMAGE_ERROR"),
      CLEANUP_EXPORT_IMAGE: "".concat(ACTION_PREFIX, "CLEANUP_EXPORT_IMAGE"),
      // uiState > export data
      SET_EXPORT_SELECTED_DATASET: "".concat(ACTION_PREFIX, "SET_EXPORT_SELECTED_DATASET"),
      SET_EXPORT_DATA_TYPE: "".concat(ACTION_PREFIX, "SET_EXPORT_DATA_TYPE"),
      SET_EXPORT_FILTERED: "".concat(ACTION_PREFIX, "SET_EXPORT_FILTERED"),
      SET_EXPORT_DATA: "".concat(ACTION_PREFIX, "SET_EXPORT_DATA"),
      // uiState > export map
      SET_EXPORT_MAP_FORMAT: "".concat(ACTION_PREFIX, "SET_EXPORT_MAP_FORMAT"),
      SET_USER_MAPBOX_ACCESS_TOKEN: "".concat(ACTION_PREFIX, "SET_USER_MAPBOX_ACCESS_TOKEN"),
      SET_EXPORT_MAP_HTML_MODE: "".concat(ACTION_PREFIX, "SET_EXPORT_MAP_HTML_MODE"),
      // uiState > editor
      SET_EDITOR_MODE: "".concat(ACTION_PREFIX, "SET_EDITOR_MODE"),
      SET_SELECTED_FEATURE: "".concat(ACTION_PREFIX, "SET_SELECTED_FEATURE"),
      // all
      INIT: "".concat(ACTION_PREFIX, "INIT"),
      ADD_DATA_TO_MAP: "".concat(ACTION_PREFIX, "ADD_DATA_TO_MAP"),
      RECEIVE_MAP_CONFIG: "".concat(ACTION_PREFIX, "RECEIVE_MAP_CONFIG"),
      RESET_MAP_CONFIG: "".concat(ACTION_PREFIX, "RESET_MAP_CONFIG"),
      // geo-operations
      SET_FEATURES: "".concat(ACTION_PREFIX, "SET_FEATURES"),
      SET_POLYGON_FILTER_LAYER: "".concat(ACTION_PREFIX, "SET_POLYGON_FILTER_LAYER"),
      DELETE_FEATURE: "".concat(ACTION_PREFIX, "DELETE_FEATURE"),
      TOGGLE_EDITOR_VISIBILITY: "".concat(ACTION_PREFIX, "TOGGLE_EDITOR_VISIBILITY"),
      // storage
      START_SAVE_STORAGE: "".concat(ACTION_PREFIX, "START_SAVE_STORAGE")
    };
    var _default = ActionTypes;
    exports["default"] = _default;
  }
});

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant6 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant6;
  }
});

// node_modules/redux-actions/es/utils/isFunction.js
var isFunction_default;
var init_isFunction = __esm({
  "node_modules/redux-actions/es/utils/isFunction.js"() {
    isFunction_default = function(value) {
      return typeof value === "function";
    };
  }
});

// node_modules/redux-actions/es/utils/isSymbol.js
var isSymbol_default;
var init_isSymbol = __esm({
  "node_modules/redux-actions/es/utils/isSymbol.js"() {
    isSymbol_default = function(value) {
      return typeof value === "symbol" || typeof value === "object" && Object.prototype.toString.call(value) === "[object Symbol]";
    };
  }
});

// node_modules/redux-actions/es/utils/isEmpty.js
var isEmpty_default;
var init_isEmpty = __esm({
  "node_modules/redux-actions/es/utils/isEmpty.js"() {
    isEmpty_default = function(value) {
      return value.length === 0;
    };
  }
});

// node_modules/redux-actions/es/utils/toString.js
var toString_default;
var init_toString = __esm({
  "node_modules/redux-actions/es/utils/toString.js"() {
    toString_default = function(value) {
      return value.toString();
    };
  }
});

// node_modules/redux-actions/es/utils/isString.js
var isString_default;
var init_isString = __esm({
  "node_modules/redux-actions/es/utils/isString.js"() {
    isString_default = function(value) {
      return typeof value === "string";
    };
  }
});

// node_modules/redux-actions/es/constants.js
var DEFAULT_NAMESPACE, ACTION_TYPE_DELIMITER;
var init_constants = __esm({
  "node_modules/redux-actions/es/constants.js"() {
    DEFAULT_NAMESPACE = "/";
    ACTION_TYPE_DELIMITER = "||";
  }
});

// node_modules/redux-actions/es/combineActions.js
function isValidActionType(type) {
  return isString_default(type) || isFunction_default(type) || isSymbol_default(type);
}
function isValidActionTypes(types) {
  if (isEmpty_default(types)) {
    return false;
  }
  return types.every(isValidActionType);
}
function combineActions() {
  for (var _len = arguments.length, actionsTypes = new Array(_len), _key = 0; _key < _len; _key++) {
    actionsTypes[_key] = arguments[_key];
  }
  (0, import_invariant.default)(isValidActionTypes(actionsTypes), "Expected action types to be strings, symbols, or action creators");
  var combinedActionType = actionsTypes.map(toString_default).join(ACTION_TYPE_DELIMITER);
  return {
    toString: function toString() {
      return combinedActionType;
    }
  };
}
var import_invariant;
var init_combineActions = __esm({
  "node_modules/redux-actions/es/combineActions.js"() {
    import_invariant = __toESM(require_browser());
    init_isFunction();
    init_isSymbol();
    init_isEmpty();
    init_toString();
    init_isString();
    init_constants();
  }
});

// node_modules/redux-actions/es/utils/identity.js
var identity_default;
var init_identity = __esm({
  "node_modules/redux-actions/es/utils/identity.js"() {
    identity_default = function(value) {
      return value;
    };
  }
});

// node_modules/redux-actions/es/utils/isNull.js
var isNull_default;
var init_isNull = __esm({
  "node_modules/redux-actions/es/utils/isNull.js"() {
    isNull_default = function(value) {
      return value === null;
    };
  }
});

// node_modules/redux-actions/es/createAction.js
function createAction(type, payloadCreator, metaCreator) {
  if (payloadCreator === void 0) {
    payloadCreator = identity_default;
  }
  (0, import_invariant2.default)(isFunction_default(payloadCreator) || isNull_default(payloadCreator), "Expected payloadCreator to be a function, undefined or null");
  var finalPayloadCreator = isNull_default(payloadCreator) || payloadCreator === identity_default ? identity_default : function(head) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return head instanceof Error ? head : payloadCreator.apply(void 0, [head].concat(args));
  };
  var hasMeta = isFunction_default(metaCreator);
  var typeString = type.toString();
  var actionCreator = function actionCreator2() {
    var payload = finalPayloadCreator.apply(void 0, arguments);
    var action = {
      type
    };
    if (payload instanceof Error) {
      action.error = true;
    }
    if (payload !== void 0) {
      action.payload = payload;
    }
    if (hasMeta) {
      action.meta = metaCreator.apply(void 0, arguments);
    }
    return action;
  };
  actionCreator.toString = function() {
    return typeString;
  };
  return actionCreator;
}
var import_invariant2;
var init_createAction = __esm({
  "node_modules/redux-actions/es/createAction.js"() {
    import_invariant2 = __toESM(require_browser());
    init_isFunction();
    init_identity();
    init_isNull();
  }
});

// node_modules/redux-actions/es/utils/isPlainObject.js
var isPlainObject_default;
var init_isPlainObject = __esm({
  "node_modules/redux-actions/es/utils/isPlainObject.js"() {
    isPlainObject_default = function(value) {
      if (typeof value !== "object" || value === null)
        return false;
      var proto = value;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(value) === proto;
    };
  }
});

// node_modules/redux-actions/es/utils/isArray.js
var isArray_default;
var init_isArray = __esm({
  "node_modules/redux-actions/es/utils/isArray.js"() {
    isArray_default = function(value) {
      return Array.isArray(value);
    };
  }
});

// node_modules/redux-actions/es/utils/isNil.js
var isNil_default;
var init_isNil = __esm({
  "node_modules/redux-actions/es/utils/isNil.js"() {
    isNil_default = function(value) {
      return value === null || value === void 0;
    };
  }
});

// node_modules/redux-actions/es/utils/getLastElement.js
var getLastElement_default;
var init_getLastElement = __esm({
  "node_modules/redux-actions/es/utils/getLastElement.js"() {
    getLastElement_default = function(array) {
      return array[array.length - 1];
    };
  }
});

// node_modules/to-no-case/index.js
var require_to_no_case = __commonJS({
  "node_modules/to-no-case/index.js"(exports, module) {
    module.exports = toNoCase;
    var hasSpace = /\s/;
    var hasSeparator = /(_|-|\.|:)/;
    var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/;
    function toNoCase(string) {
      if (hasSpace.test(string))
        return string.toLowerCase();
      if (hasSeparator.test(string))
        return (unseparate(string) || string).toLowerCase();
      if (hasCamel.test(string))
        return uncamelize(string).toLowerCase();
      return string.toLowerCase();
    }
    var separatorSplitter = /[\W_]+(.|$)/g;
    function unseparate(string) {
      return string.replace(separatorSplitter, function(m, next) {
        return next ? " " + next : "";
      });
    }
    var camelSplitter = /(.)([A-Z]+)/g;
    function uncamelize(string) {
      return string.replace(camelSplitter, function(m, previous, uppers) {
        return previous + " " + uppers.toLowerCase().split("").join(" ");
      });
    }
  }
});

// node_modules/to-space-case/index.js
var require_to_space_case = __commonJS({
  "node_modules/to-space-case/index.js"(exports, module) {
    var clean = require_to_no_case();
    module.exports = toSpaceCase;
    function toSpaceCase(string) {
      return clean(string).replace(/[\W_]+(.|$)/g, function(matches, match) {
        return match ? " " + match : "";
      }).trim();
    }
  }
});

// node_modules/to-camel-case/index.js
var require_to_camel_case = __commonJS({
  "node_modules/to-camel-case/index.js"(exports, module) {
    var space = require_to_space_case();
    module.exports = toCamelCase;
    function toCamelCase(string) {
      return space(string).replace(/\s(\w)/g, function(matches, letter) {
        return letter.toUpperCase();
      });
    }
  }
});

// node_modules/redux-actions/es/utils/camelCase.js
var import_to_camel_case, namespacer, camelCase_default;
var init_camelCase = __esm({
  "node_modules/redux-actions/es/utils/camelCase.js"() {
    import_to_camel_case = __toESM(require_to_camel_case());
    namespacer = "/";
    camelCase_default = function(type) {
      return type.indexOf(namespacer) === -1 ? (0, import_to_camel_case.default)(type) : type.split(namespacer).map(import_to_camel_case.default).join(namespacer);
    };
  }
});

// node_modules/redux-actions/es/utils/arrayToObject.js
var arrayToObject_default;
var init_arrayToObject = __esm({
  "node_modules/redux-actions/es/utils/arrayToObject.js"() {
    arrayToObject_default = function(array, callback) {
      return array.reduce(function(partialObject, element) {
        return callback(partialObject, element);
      }, {});
    };
  }
});

// node_modules/redux-actions/es/utils/isMap.js
var isMap_default;
var init_isMap = __esm({
  "node_modules/redux-actions/es/utils/isMap.js"() {
    isMap_default = function(value) {
      return typeof Map !== "undefined" && value instanceof Map;
    };
  }
});

// node_modules/redux-actions/es/utils/ownKeys.js
function ownKeys(object) {
  if (isMap_default(object)) {
    return Array.from(object.keys());
  }
  if (typeof Reflect !== "undefined" && typeof Reflect.ownKeys === "function") {
    return Reflect.ownKeys(object);
  }
  var keys = Object.getOwnPropertyNames(object);
  if (typeof Object.getOwnPropertySymbols === "function") {
    keys = keys.concat(Object.getOwnPropertySymbols(object));
  }
  return keys;
}
var init_ownKeys = __esm({
  "node_modules/redux-actions/es/utils/ownKeys.js"() {
    init_isMap();
  }
});

// node_modules/redux-actions/es/utils/get.js
function get(key, x) {
  return isMap_default(x) ? x.get(key) : x[key];
}
var init_get = __esm({
  "node_modules/redux-actions/es/utils/get.js"() {
    init_isMap();
  }
});

// node_modules/redux-actions/es/utils/flattenWhenNode.js
var flattenWhenNode_default;
var init_flattenWhenNode = __esm({
  "node_modules/redux-actions/es/utils/flattenWhenNode.js"() {
    init_constants();
    init_ownKeys();
    init_get();
    flattenWhenNode_default = function(predicate) {
      return function flatten(map, _temp, partialFlatMap, partialFlatActionType) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$namespace = _ref.namespace, namespace = _ref$namespace === void 0 ? DEFAULT_NAMESPACE : _ref$namespace, prefix = _ref.prefix;
        if (partialFlatMap === void 0) {
          partialFlatMap = {};
        }
        if (partialFlatActionType === void 0) {
          partialFlatActionType = "";
        }
        function connectNamespace(type) {
          var _ref2;
          if (!partialFlatActionType)
            return type;
          var types = type.toString().split(ACTION_TYPE_DELIMITER);
          var partials = partialFlatActionType.split(ACTION_TYPE_DELIMITER);
          return (_ref2 = []).concat.apply(_ref2, partials.map(function(p) {
            return types.map(function(t) {
              return "" + p + namespace + t;
            });
          })).join(ACTION_TYPE_DELIMITER);
        }
        function connectPrefix(type) {
          if (partialFlatActionType || !prefix || prefix && new RegExp("^" + prefix + namespace).test(type)) {
            return type;
          }
          return "" + prefix + namespace + type;
        }
        ownKeys(map).forEach(function(type) {
          var nextNamespace = connectPrefix(connectNamespace(type));
          var mapValue = get(type, map);
          if (predicate(mapValue)) {
            flatten(mapValue, {
              namespace,
              prefix
            }, partialFlatMap, nextNamespace);
          } else {
            partialFlatMap[nextNamespace] = mapValue;
          }
        });
        return partialFlatMap;
      };
    };
  }
});

// node_modules/redux-actions/es/utils/flattenActionMap.js
var flattenActionMap_default;
var init_flattenActionMap = __esm({
  "node_modules/redux-actions/es/utils/flattenActionMap.js"() {
    init_isPlainObject();
    init_flattenWhenNode();
    flattenActionMap_default = flattenWhenNode_default(isPlainObject_default);
  }
});

// node_modules/redux-actions/es/utils/unflattenActionCreators.js
function unflattenActionCreators(flatActionCreators, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$namespace = _ref.namespace, namespace = _ref$namespace === void 0 ? DEFAULT_NAMESPACE : _ref$namespace, prefix = _ref.prefix;
  function unflatten(flatActionType, partialNestedActionCreators, partialFlatActionTypePath) {
    var nextNamespace = camelCase_default(partialFlatActionTypePath.shift());
    if (isEmpty_default(partialFlatActionTypePath)) {
      partialNestedActionCreators[nextNamespace] = flatActionCreators[flatActionType];
    } else {
      if (!partialNestedActionCreators[nextNamespace]) {
        partialNestedActionCreators[nextNamespace] = {};
      }
      unflatten(flatActionType, partialNestedActionCreators[nextNamespace], partialFlatActionTypePath);
    }
  }
  var nestedActionCreators = {};
  Object.getOwnPropertyNames(flatActionCreators).forEach(function(type) {
    var unprefixedType = prefix ? type.replace("" + prefix + namespace, "") : type;
    return unflatten(type, nestedActionCreators, unprefixedType.split(namespace));
  });
  return nestedActionCreators;
}
var init_unflattenActionCreators = __esm({
  "node_modules/redux-actions/es/utils/unflattenActionCreators.js"() {
    init_constants();
    init_isEmpty();
    init_camelCase();
  }
});

// node_modules/redux-actions/es/createActions.js
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys2 = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key) {
      _defineProperty(target, key, source[key]);
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function createActions(actionMap) {
  for (var _len = arguments.length, identityActions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    identityActions[_key - 1] = arguments[_key];
  }
  var options = isPlainObject_default(getLastElement_default(identityActions)) ? identityActions.pop() : {};
  (0, import_invariant3.default)(identityActions.every(isString_default) && (isString_default(actionMap) || isPlainObject_default(actionMap)), "Expected optional object followed by string action types");
  if (isString_default(actionMap)) {
    return actionCreatorsFromIdentityActions([actionMap].concat(identityActions), options);
  }
  return _objectSpread({}, actionCreatorsFromActionMap(actionMap, options), actionCreatorsFromIdentityActions(identityActions, options));
}
function actionCreatorsFromActionMap(actionMap, options) {
  var flatActionMap = flattenActionMap_default(actionMap, options);
  var flatActionCreators = actionMapToActionCreators(flatActionMap);
  return unflattenActionCreators(flatActionCreators, options);
}
function actionMapToActionCreators(actionMap, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, prefix = _ref.prefix, _ref$namespace = _ref.namespace, namespace = _ref$namespace === void 0 ? DEFAULT_NAMESPACE : _ref$namespace;
  function isValidActionMapValue(actionMapValue) {
    if (isFunction_default(actionMapValue) || isNil_default(actionMapValue)) {
      return true;
    }
    if (isArray_default(actionMapValue)) {
      var _actionMapValue$ = actionMapValue[0], payload = _actionMapValue$ === void 0 ? identity_default : _actionMapValue$, meta = actionMapValue[1];
      return isFunction_default(payload) && isFunction_default(meta);
    }
    return false;
  }
  return arrayToObject_default(Object.keys(actionMap), function(partialActionCreators, type) {
    var _objectSpread2;
    var actionMapValue = actionMap[type];
    (0, import_invariant3.default)(isValidActionMapValue(actionMapValue), "Expected function, undefined, null, or array with payload and meta " + ("functions for " + type));
    var prefixedType = prefix ? "" + prefix + namespace + type : type;
    var actionCreator = isArray_default(actionMapValue) ? createAction.apply(void 0, [prefixedType].concat(actionMapValue)) : createAction(prefixedType, actionMapValue);
    return _objectSpread({}, partialActionCreators, (_objectSpread2 = {}, _objectSpread2[type] = actionCreator, _objectSpread2));
  });
}
function actionCreatorsFromIdentityActions(identityActions, options) {
  var actionMap = arrayToObject_default(identityActions, function(partialActionMap, type) {
    var _objectSpread3;
    return _objectSpread({}, partialActionMap, (_objectSpread3 = {}, _objectSpread3[type] = identity_default, _objectSpread3));
  });
  var actionCreators = actionMapToActionCreators(actionMap, options);
  return arrayToObject_default(Object.keys(actionCreators), function(partialActionCreators, type) {
    var _objectSpread4;
    return _objectSpread({}, partialActionCreators, (_objectSpread4 = {}, _objectSpread4[camelCase_default(type)] = actionCreators[type], _objectSpread4));
  });
}
var import_invariant3;
var init_createActions = __esm({
  "node_modules/redux-actions/es/createActions.js"() {
    import_invariant3 = __toESM(require_browser());
    init_isPlainObject();
    init_isFunction();
    init_identity();
    init_isArray();
    init_isString();
    init_isNil();
    init_getLastElement();
    init_camelCase();
    init_arrayToObject();
    init_flattenActionMap();
    init_unflattenActionCreators();
    init_createAction();
    init_constants();
  }
});

// node_modules/just-curry-it/index.js
var require_just_curry_it = __commonJS({
  "node_modules/just-curry-it/index.js"(exports, module) {
    module.exports = curry2;
    function curry2(fn, arity) {
      return function curried() {
        if (arity == null) {
          arity = fn.length;
        }
        var args = [].slice.call(arguments);
        if (args.length >= arity) {
          return fn.apply(this, args);
        } else {
          return function() {
            return curried.apply(this, args.concat([].slice.call(arguments)));
          };
        }
      };
    }
  }
});

// node_modules/redux-actions/es/createCurriedAction.js
var import_just_curry_it, createCurriedAction_default;
var init_createCurriedAction = __esm({
  "node_modules/redux-actions/es/createCurriedAction.js"() {
    import_just_curry_it = __toESM(require_just_curry_it());
    init_createAction();
    createCurriedAction_default = function(type, payloadCreator) {
      return (0, import_just_curry_it.default)(createAction(type, payloadCreator), payloadCreator.length);
    };
  }
});

// node_modules/redux-actions/es/utils/isUndefined.js
var isUndefined_default;
var init_isUndefined = __esm({
  "node_modules/redux-actions/es/utils/isUndefined.js"() {
    isUndefined_default = function(value) {
      return value === void 0;
    };
  }
});

// node_modules/redux-actions/es/handleAction.js
function handleAction(type, reducer, defaultState) {
  if (reducer === void 0) {
    reducer = identity_default;
  }
  var types = toString_default(type).split(ACTION_TYPE_DELIMITER);
  (0, import_invariant4.default)(!isUndefined_default(defaultState), "defaultState for reducer handling " + types.join(", ") + " should be defined");
  (0, import_invariant4.default)(isFunction_default(reducer) || isPlainObject_default(reducer), "Expected reducer to be a function or object with next and throw reducers");
  var _ref = isFunction_default(reducer) ? [reducer, reducer] : [reducer.next, reducer.throw].map(function(aReducer) {
    return isNil_default(aReducer) ? identity_default : aReducer;
  }), nextReducer = _ref[0], throwReducer = _ref[1];
  return function(state, action) {
    if (state === void 0) {
      state = defaultState;
    }
    var actionType = action.type;
    if (!actionType || types.indexOf(toString_default(actionType)) === -1) {
      return state;
    }
    return (action.error === true ? throwReducer : nextReducer)(state, action);
  };
}
var import_invariant4;
var init_handleAction = __esm({
  "node_modules/redux-actions/es/handleAction.js"() {
    import_invariant4 = __toESM(require_browser());
    init_isFunction();
    init_isPlainObject();
    init_identity();
    init_isNil();
    init_isUndefined();
    init_toString();
    init_constants();
  }
});

// node_modules/reduce-reducers/es/index.js
var es_default;
var init_es = __esm({
  "node_modules/reduce-reducers/es/index.js"() {
    es_default = function() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var initialState = typeof args[args.length - 1] !== "function" && args.pop();
      var reducers = args;
      if (typeof initialState === "undefined") {
        throw new TypeError("The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.");
      }
      return function(prevState, value) {
        for (var _len2 = arguments.length, args2 = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args2[_key2 - 2] = arguments[_key2];
        }
        var prevStateIsUndefined = typeof prevState === "undefined";
        var valueIsUndefined = typeof value === "undefined";
        if (prevStateIsUndefined && valueIsUndefined && initialState) {
          return initialState;
        }
        return reducers.reduce(function(newState, reducer) {
          return reducer.apply(void 0, [newState, value].concat(args2));
        }, prevStateIsUndefined && !valueIsUndefined && initialState ? initialState : prevState);
      };
    };
  }
});

// node_modules/redux-actions/es/utils/hasGeneratorInterface.js
function hasGeneratorInterface(handler) {
  var keys = ownKeys(handler);
  var hasOnlyInterfaceNames = keys.every(function(ownKey) {
    return ownKey === "next" || ownKey === "throw";
  });
  return keys.length && keys.length <= 2 && hasOnlyInterfaceNames;
}
var init_hasGeneratorInterface = __esm({
  "node_modules/redux-actions/es/utils/hasGeneratorInterface.js"() {
    init_ownKeys();
  }
});

// node_modules/redux-actions/es/utils/flattenReducerMap.js
var flattenReducerMap_default;
var init_flattenReducerMap = __esm({
  "node_modules/redux-actions/es/utils/flattenReducerMap.js"() {
    init_isPlainObject();
    init_isMap();
    init_hasGeneratorInterface();
    init_flattenWhenNode();
    flattenReducerMap_default = flattenWhenNode_default(function(node) {
      return (isPlainObject_default(node) || isMap_default(node)) && !hasGeneratorInterface(node);
    });
  }
});

// node_modules/redux-actions/es/handleActions.js
function handleActions(handlers, defaultState, options) {
  if (options === void 0) {
    options = {};
  }
  (0, import_invariant5.default)(isPlainObject_default(handlers) || isMap_default(handlers), "Expected handlers to be a plain object.");
  var flattenedReducerMap = flattenReducerMap_default(handlers, options);
  var reducers = ownKeys(flattenedReducerMap).map(function(type) {
    return handleAction(type, get(type, flattenedReducerMap), defaultState);
  });
  var reducer = es_default.apply(void 0, reducers.concat([defaultState]));
  return function(state, action) {
    if (state === void 0) {
      state = defaultState;
    }
    return reducer(state, action);
  };
}
var import_invariant5;
var init_handleActions = __esm({
  "node_modules/redux-actions/es/handleActions.js"() {
    init_es();
    import_invariant5 = __toESM(require_browser());
    init_isPlainObject();
    init_isMap();
    init_ownKeys();
    init_flattenReducerMap();
    init_handleAction();
    init_get();
  }
});

// node_modules/redux-actions/es/index.js
var es_exports = {};
__export(es_exports, {
  combineActions: () => combineActions,
  createAction: () => createAction,
  createActions: () => createActions,
  createCurriedAction: () => createCurriedAction_default,
  handleAction: () => handleAction,
  handleActions: () => handleActions
});
var init_es2 = __esm({
  "node_modules/redux-actions/es/index.js"() {
    init_combineActions();
    init_createAction();
    init_createActions();
    init_createCurriedAction();
    init_handleAction();
    init_handleActions();
  }
});

// node_modules/kepler.gl/dist/actions/actions.js
var require_actions = __commonJS({
  "node_modules/kepler.gl/dist/actions/actions.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.keplerGlInit = exports.receiveMapConfig = exports.resetMapConfig = exports.addDataToMap = void 0;
    var _actionTypes = _interopRequireDefault(require_action_types());
    var _reduxActions = (init_es2(), __toCommonJS(es_exports));
    var addDataToMap = (0, _reduxActions.createAction)(_actionTypes["default"].ADD_DATA_TO_MAP, function(data) {
      return data;
    });
    exports.addDataToMap = addDataToMap;
    var resetMapConfig = (0, _reduxActions.createAction)(_actionTypes["default"].RESET_MAP_CONFIG);
    exports.resetMapConfig = resetMapConfig;
    var receiveMapConfig = (0, _reduxActions.createAction)(_actionTypes["default"].RECEIVE_MAP_CONFIG, function(config, options) {
      return {
        config,
        options
      };
    });
    exports.receiveMapConfig = receiveMapConfig;
    var keplerGlInit = (0, _reduxActions.createAction)(
      _actionTypes["default"].INIT,
      // @ts-ignore
      function(payload) {
        return payload;
      }
    );
    exports.keplerGlInit = keplerGlInit;
  }
});

// node_modules/kepler.gl/dist/actions/vis-state-actions.js
var require_vis_state_actions = __commonJS({
  "node_modules/kepler.gl/dist/actions/vis-state-actions.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.layerConfigChange = layerConfigChange;
    exports.layerTextLabelChange = layerTextLabelChange;
    exports.layerTypeChange = layerTypeChange;
    exports.layerVisualChannelConfigChange = layerVisualChannelConfigChange;
    exports.layerVisConfigChange = layerVisConfigChange;
    exports.layerColorUIChange = layerColorUIChange;
    exports.updateLayerBlending = updateLayerBlending;
    exports.interactionConfigChange = interactionConfigChange;
    exports.setFilter = setFilter;
    exports.setFilterAnimationTime = setFilterAnimationTime;
    exports.setFilterAnimationWindow = setFilterAnimationWindow;
    exports.addFilter = addFilter;
    exports.addLayer = addLayer;
    exports.reorderLayer = reorderLayer;
    exports.removeFilter = removeFilter;
    exports.removeLayer = removeLayer;
    exports.duplicateLayer = duplicateLayer;
    exports.removeDataset = removeDataset;
    exports.showDatasetTable = showDatasetTable;
    exports.sortTableColumn = sortTableColumn;
    exports.pinTableColumn = pinTableColumn;
    exports.copyTableColumn = copyTableColumn;
    exports.updateVisData = updateVisData;
    exports.renameDataset = renameDataset;
    exports.toggleFilterAnimation = toggleFilterAnimation;
    exports.updateFilterAnimationSpeed = updateFilterAnimationSpeed;
    exports.setLayerAnimationTime = setLayerAnimationTime;
    exports.updateLayerAnimationSpeed = updateLayerAnimationSpeed;
    exports.toggleLayerAnimation = toggleLayerAnimation;
    exports.toggleLayerAnimationControl = toggleLayerAnimationControl;
    exports.enlargeFilter = enlargeFilter;
    exports.toggleFilterFeature = toggleFilterFeature;
    exports.onLayerHover = onLayerHover;
    exports.onLayerClick = onLayerClick;
    exports.onMapClick = onMapClick;
    exports.onMouseMove = onMouseMove;
    exports.toggleLayerForMap = toggleLayerForMap;
    exports.setFilterPlot = setFilterPlot;
    exports.setMapInfo = setMapInfo;
    exports.loadFiles = loadFiles;
    exports.loadNextFile = loadNextFile;
    exports.loadFilesSuccess = loadFilesSuccess;
    exports.loadFileStepSuccess = loadFileStepSuccess;
    exports.loadFilesErr = loadFilesErr;
    exports.setFeatures = setFeatures;
    exports.setPolygonFilterLayer = setPolygonFilterLayer;
    exports.setSelectedFeature = setSelectedFeature;
    exports.deleteFeature = deleteFeature;
    exports.setEditorMode = setEditorMode;
    exports.applyCPUFilter = applyCPUFilter;
    exports.toggleEditorVisibility = toggleEditorVisibility;
    exports.nextFileBatch = nextFileBatch;
    exports.processFileContent = processFileContent;
    exports.setLayerAnimationTimeConfig = setLayerAnimationTimeConfig;
    exports.setFilterAnimationTimeConfig = setFilterAnimationTimeConfig;
    var _actionTypes = _interopRequireDefault(require_action_types());
    function layerConfigChange(oldLayer, newConfig) {
      return {
        type: _actionTypes["default"].LAYER_CONFIG_CHANGE,
        oldLayer,
        newConfig
      };
    }
    function layerTextLabelChange(oldLayer, idx, prop, value) {
      return {
        type: _actionTypes["default"].LAYER_TEXT_LABEL_CHANGE,
        oldLayer,
        idx,
        prop,
        value
      };
    }
    function layerTypeChange(oldLayer, newType) {
      return {
        type: _actionTypes["default"].LAYER_TYPE_CHANGE,
        oldLayer,
        newType
      };
    }
    function layerVisualChannelConfigChange(oldLayer, newConfig, channel) {
      return {
        type: _actionTypes["default"].LAYER_VISUAL_CHANNEL_CHANGE,
        oldLayer,
        newConfig,
        channel
      };
    }
    function layerVisConfigChange(oldLayer, newVisConfig) {
      return {
        type: _actionTypes["default"].LAYER_VIS_CONFIG_CHANGE,
        oldLayer,
        newVisConfig
      };
    }
    function layerColorUIChange(oldLayer, prop, newConfig) {
      return {
        type: _actionTypes["default"].LAYER_COLOR_UI_CHANGE,
        oldLayer,
        prop,
        newConfig
      };
    }
    function updateLayerBlending(mode) {
      return {
        type: _actionTypes["default"].UPDATE_LAYER_BLENDING,
        mode
      };
    }
    function interactionConfigChange(config) {
      return {
        type: _actionTypes["default"].INTERACTION_CONFIG_CHANGE,
        config
      };
    }
    function setFilter(idx, prop, value, valueIndex) {
      return {
        type: _actionTypes["default"].SET_FILTER,
        idx,
        prop,
        value,
        valueIndex
      };
    }
    function setFilterAnimationTime(idx, prop, value, valueIndex) {
      return {
        type: _actionTypes["default"].SET_FILTER_ANIMATION_TIME,
        idx,
        prop,
        value,
        valueIndex
      };
    }
    function setFilterAnimationWindow(_ref) {
      var id = _ref.id, animationWindow = _ref.animationWindow;
      return {
        type: _actionTypes["default"].SET_FILTER_ANIMATION_WINDOW,
        id,
        animationWindow
      };
    }
    function addFilter(dataId) {
      return {
        type: _actionTypes["default"].ADD_FILTER,
        dataId
      };
    }
    function addLayer(config) {
      return {
        type: _actionTypes["default"].ADD_LAYER,
        config
      };
    }
    function reorderLayer(order) {
      return {
        type: _actionTypes["default"].REORDER_LAYER,
        order
      };
    }
    function removeFilter(idx) {
      return {
        type: _actionTypes["default"].REMOVE_FILTER,
        idx
      };
    }
    function removeLayer(idx) {
      return {
        type: _actionTypes["default"].REMOVE_LAYER,
        idx
      };
    }
    function duplicateLayer(idx) {
      return {
        type: _actionTypes["default"].DUPLICATE_LAYER,
        idx
      };
    }
    function removeDataset(dataId) {
      return {
        type: _actionTypes["default"].REMOVE_DATASET,
        dataId
      };
    }
    function showDatasetTable(dataId) {
      return {
        type: _actionTypes["default"].SHOW_DATASET_TABLE,
        dataId
      };
    }
    function sortTableColumn(dataId, column, mode) {
      return {
        type: _actionTypes["default"].SORT_TABLE_COLUMN,
        dataId,
        column,
        mode
      };
    }
    function pinTableColumn(dataId, column) {
      return {
        type: _actionTypes["default"].PIN_TABLE_COLUMN,
        dataId,
        column
      };
    }
    function copyTableColumn(dataId, column) {
      return {
        type: _actionTypes["default"].COPY_TABLE_COLUMN,
        dataId,
        column
      };
    }
    function updateVisData(datasets, options, config) {
      return {
        type: _actionTypes["default"].UPDATE_VIS_DATA,
        datasets,
        options,
        config
      };
    }
    function renameDataset(dataId, label) {
      return {
        type: _actionTypes["default"].RENAME_DATASET,
        dataId,
        label
      };
    }
    function toggleFilterAnimation(idx) {
      return {
        type: _actionTypes["default"].TOGGLE_FILTER_ANIMATION,
        idx
      };
    }
    function updateFilterAnimationSpeed(idx, speed) {
      return {
        type: _actionTypes["default"].UPDATE_FILTER_ANIMATION_SPEED,
        idx,
        speed
      };
    }
    function setLayerAnimationTime(value) {
      return {
        type: _actionTypes["default"].SET_LAYER_ANIMATION_TIME,
        value
      };
    }
    function updateLayerAnimationSpeed(speed) {
      return {
        type: _actionTypes["default"].UPDATE_LAYER_ANIMATION_SPEED,
        speed
      };
    }
    function toggleLayerAnimation() {
      return {
        type: _actionTypes["default"].TOGGLE_LAYER_ANIMATION
      };
    }
    function toggleLayerAnimationControl() {
      return {
        type: _actionTypes["default"].TOGGLE_LAYER_ANIMATION_CONTROL
      };
    }
    function enlargeFilter(idx) {
      return {
        type: _actionTypes["default"].ENLARGE_FILTER,
        idx
      };
    }
    function toggleFilterFeature(idx) {
      return {
        type: _actionTypes["default"].TOGGLE_FILTER_FEATURE,
        idx
      };
    }
    function onLayerHover(info) {
      return {
        type: _actionTypes["default"].LAYER_HOVER,
        info
      };
    }
    function onLayerClick(info) {
      return {
        type: _actionTypes["default"].LAYER_CLICK,
        info
      };
    }
    function onMapClick() {
      return {
        type: _actionTypes["default"].MAP_CLICK
      };
    }
    function onMouseMove(evt) {
      return {
        type: _actionTypes["default"].MOUSE_MOVE,
        evt
      };
    }
    function toggleLayerForMap(mapIndex, layerId) {
      return {
        type: _actionTypes["default"].TOGGLE_LAYER_FOR_MAP,
        mapIndex,
        layerId
      };
    }
    function setFilterPlot(idx, newProp, valueIndex) {
      return {
        type: _actionTypes["default"].SET_FILTER_PLOT,
        idx,
        newProp,
        valueIndex
      };
    }
    function setMapInfo(info) {
      return {
        type: _actionTypes["default"].SET_MAP_INFO,
        info
      };
    }
    function loadFiles(files, onFinish) {
      return {
        type: _actionTypes["default"].LOAD_FILES,
        files,
        onFinish
      };
    }
    function loadNextFile() {
      return {
        type: _actionTypes["default"].LOAD_NEXT_FILE
      };
    }
    function loadFilesSuccess(result) {
      return {
        type: _actionTypes["default"].LOAD_FILES_SUCCESS,
        result
      };
    }
    function loadFileStepSuccess(_ref2) {
      var fileName = _ref2.fileName, fileCache = _ref2.fileCache;
      return {
        type: _actionTypes["default"].LOAD_FILE_STEP_SUCCESS,
        fileName,
        fileCache
      };
    }
    function loadFilesErr(fileName, error) {
      return {
        type: _actionTypes["default"].LOAD_FILES_ERR,
        fileName,
        error
      };
    }
    function setFeatures(features) {
      return {
        type: _actionTypes["default"].SET_FEATURES,
        features
      };
    }
    function setPolygonFilterLayer(layer, feature) {
      return {
        type: _actionTypes["default"].SET_POLYGON_FILTER_LAYER,
        layer,
        feature
      };
    }
    function setSelectedFeature(feature) {
      return {
        type: _actionTypes["default"].SET_SELECTED_FEATURE,
        feature
      };
    }
    function deleteFeature(feature) {
      return {
        type: _actionTypes["default"].DELETE_FEATURE,
        feature
      };
    }
    function setEditorMode(mode) {
      return {
        type: _actionTypes["default"].SET_EDITOR_MODE,
        mode
      };
    }
    function applyCPUFilter(dataId) {
      return {
        type: _actionTypes["default"].APPLY_CPU_FILTER,
        dataId
      };
    }
    function toggleEditorVisibility() {
      return {
        type: _actionTypes["default"].TOGGLE_EDITOR_VISIBILITY
      };
    }
    function nextFileBatch(payload) {
      return {
        type: _actionTypes["default"].NEXT_FILE_BATCH,
        payload
      };
    }
    function processFileContent(payload) {
      return {
        type: _actionTypes["default"].PROCESS_FILE_CONTENT,
        payload
      };
    }
    function setLayerAnimationTimeConfig(config) {
      return {
        type: _actionTypes["default"].SET_LAYER_ANIMATION_TIME_CONFIG,
        config
      };
    }
    function setFilterAnimationTimeConfig(idx, config) {
      return {
        type: _actionTypes["default"].SET_FILTER_ANIMATION_TIME_CONFIG,
        idx,
        config
      };
    }
  }
});

// node_modules/kepler.gl/dist/actions/ui-state-actions.js
var require_ui_state_actions = __commonJS({
  "node_modules/kepler.gl/dist/actions/ui-state-actions.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.setLocale = exports.setExportHTMLMapMode = exports.setExportMapFormat = exports.setUserMapboxAccessToken = exports.setExportData = exports.setExportFiltered = exports.setExportDataType = exports.setExportSelectedDataset = exports.cleanupExportImage = exports.setExportImageError = exports.setExportImageDataUri = exports.startExportingImage = exports.setExportImageSetting = exports.removeNotification = exports.addNotification = exports.openDeleteModal = exports.setMapControlVisibility = exports.toggleMapControl = exports.hideExportDropdown = exports.showExportDropdown = exports.toggleModal = exports.toggleSidePanel = void 0;
    var _reduxActions = (init_es2(), __toCommonJS(es_exports));
    var _actionTypes = _interopRequireDefault(require_action_types());
    var toggleSidePanel = (0, _reduxActions.createAction)(_actionTypes["default"].TOGGLE_SIDE_PANEL, function(id) {
      return id;
    });
    exports.toggleSidePanel = toggleSidePanel;
    var toggleModal = (0, _reduxActions.createAction)(_actionTypes["default"].TOGGLE_MODAL, function(id) {
      return id;
    });
    exports.toggleModal = toggleModal;
    var showExportDropdown = (0, _reduxActions.createAction)(_actionTypes["default"].SHOW_EXPORT_DROPDOWN, function(id) {
      return id;
    });
    exports.showExportDropdown = showExportDropdown;
    var hideExportDropdown = (0, _reduxActions.createAction)(_actionTypes["default"].HIDE_EXPORT_DROPDOWN);
    exports.hideExportDropdown = hideExportDropdown;
    var toggleMapControl = (0, _reduxActions.createAction)(_actionTypes["default"].TOGGLE_MAP_CONTROL, function(panelId, index) {
      return {
        panelId,
        index
      };
    });
    exports.toggleMapControl = toggleMapControl;
    var setMapControlVisibility = (0, _reduxActions.createAction)(_actionTypes["default"].SET_MAP_CONTROL_VISIBILITY, function(panelId, show) {
      return {
        panelId,
        show
      };
    });
    exports.setMapControlVisibility = setMapControlVisibility;
    var openDeleteModal = (0, _reduxActions.createAction)(_actionTypes["default"].OPEN_DELETE_MODAL, function(datasetId) {
      return datasetId;
    });
    exports.openDeleteModal = openDeleteModal;
    var addNotification = (0, _reduxActions.createAction)(_actionTypes["default"].ADD_NOTIFICATION, function(notification) {
      return notification;
    });
    exports.addNotification = addNotification;
    var removeNotification = (0, _reduxActions.createAction)(_actionTypes["default"].REMOVE_NOTIFICATION, function(id) {
      return id;
    });
    exports.removeNotification = removeNotification;
    var setExportImageSetting = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_SETTING, function(newSetting) {
      return newSetting;
    });
    exports.setExportImageSetting = setExportImageSetting;
    var startExportingImage = (0, _reduxActions.createAction)(_actionTypes["default"].START_EXPORTING_IMAGE);
    exports.startExportingImage = startExportingImage;
    var setExportImageDataUri = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_DATA_URI, function(dataUri) {
      return dataUri;
    });
    exports.setExportImageDataUri = setExportImageDataUri;
    var setExportImageError = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_ERROR, function(error) {
      return error;
    });
    exports.setExportImageError = setExportImageError;
    var cleanupExportImage = (0, _reduxActions.createAction)(_actionTypes["default"].CLEANUP_EXPORT_IMAGE);
    exports.cleanupExportImage = cleanupExportImage;
    var setExportSelectedDataset = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_SELECTED_DATASET, function(datasetId) {
      return datasetId;
    });
    exports.setExportSelectedDataset = setExportSelectedDataset;
    var setExportDataType = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_DATA_TYPE, function(dataType) {
      return dataType;
    });
    exports.setExportDataType = setExportDataType;
    var setExportFiltered = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_FILTERED, function(payload) {
      return payload;
    });
    exports.setExportFiltered = setExportFiltered;
    var setExportData = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_DATA);
    exports.setExportData = setExportData;
    var setUserMapboxAccessToken = (0, _reduxActions.createAction)(_actionTypes["default"].SET_USER_MAPBOX_ACCESS_TOKEN, function(payload) {
      return payload;
    });
    exports.setUserMapboxAccessToken = setUserMapboxAccessToken;
    var setExportMapFormat = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_MAP_FORMAT, function(payload) {
      return payload;
    });
    exports.setExportMapFormat = setExportMapFormat;
    var setExportHTMLMapMode = (0, _reduxActions.createAction)(_actionTypes["default"].SET_EXPORT_MAP_HTML_MODE, function(payload) {
      return payload;
    });
    exports.setExportHTMLMapMode = setExportHTMLMapMode;
    var setLocale = (0, _reduxActions.createAction)(_actionTypes["default"].SET_LOCALE, function(locale) {
      return {
        locale
      };
    });
    exports.setLocale = setLocale;
  }
});

// node_modules/kepler.gl/dist/actions/map-style-actions.js
var require_map_style_actions = __commonJS({
  "node_modules/kepler.gl/dist/actions/map-style-actions.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.set3dBuildingColor = exports.loadCustomMapStyle = exports.mapStyleChange = exports.loadMapStyleErr = exports.loadMapStyles = exports.requestMapStyles = exports.mapConfigChange = exports.inputMapStyle = exports.addCustomMapStyle = void 0;
    var _reduxActions = (init_es2(), __toCommonJS(es_exports));
    var _actionTypes = _interopRequireDefault(require_action_types());
    var addCustomMapStyle = (0, _reduxActions.createAction)(_actionTypes["default"].ADD_CUSTOM_MAP_STYLE);
    exports.addCustomMapStyle = addCustomMapStyle;
    var inputMapStyle = (0, _reduxActions.createAction)(_actionTypes["default"].INPUT_MAP_STYLE, function(inputStyle, mapState) {
      return {
        inputStyle,
        mapState
      };
    });
    exports.inputMapStyle = inputMapStyle;
    var mapConfigChange = (0, _reduxActions.createAction)(_actionTypes["default"].MAP_CONFIG_CHANGE, function(mapStyle) {
      return mapStyle;
    });
    exports.mapConfigChange = mapConfigChange;
    var requestMapStyles = (0, _reduxActions.createAction)(_actionTypes["default"].REQUEST_MAP_STYLES, function(mapStyles) {
      return mapStyles;
    });
    exports.requestMapStyles = requestMapStyles;
    var loadMapStyles = (0, _reduxActions.createAction)(_actionTypes["default"].LOAD_MAP_STYLES, function(newStyles) {
      return newStyles;
    });
    exports.loadMapStyles = loadMapStyles;
    var loadMapStyleErr = (0, _reduxActions.createAction)(_actionTypes["default"].LOAD_MAP_STYLE_ERR, function(error) {
      return error;
    });
    exports.loadMapStyleErr = loadMapStyleErr;
    var mapStyleChange = (0, _reduxActions.createAction)(_actionTypes["default"].MAP_STYLE_CHANGE, function(styleType) {
      return styleType;
    });
    exports.mapStyleChange = mapStyleChange;
    var loadCustomMapStyle = (0, _reduxActions.createAction)(_actionTypes["default"].LOAD_CUSTOM_MAP_STYLE, function(customMapStyle) {
      return customMapStyle;
    });
    exports.loadCustomMapStyle = loadCustomMapStyle;
    var set3dBuildingColor = (0, _reduxActions.createAction)(_actionTypes["default"].SET_3D_BUILDING_COLOR, function(color) {
      return color;
    });
    exports.set3dBuildingColor = set3dBuildingColor;
  }
});

// node_modules/kepler.gl/dist/actions/provider-actions.js
var require_provider_actions = __commonJS({
  "node_modules/kepler.gl/dist/actions/provider-actions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getSavedMapsError = exports.getSavedMapsSuccess = exports.getSavedMaps = exports.loadCloudMapError = exports.loadCloudMapSuccess = exports.loadCloudMap = exports.setCloudProvider = exports.resetProviderStatus = exports.postSaveLoadSuccess = exports.exportFileError = exports.exportFileSuccess = exports.exportFileToCloud = exports.ActionTypes = void 0;
    var _reduxActions = (init_es2(), __toCommonJS(es_exports));
    var _actionTypes = require_action_types();
    var ActionTypes = {
      EXPORT_FILE_TO_CLOUD: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_TO_CLOUD"),
      EXPORT_FILE_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_SUCCESS"),
      EXPORT_FILE_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_ERROR"),
      RESET_PROVIDER_STATUS: "".concat(_actionTypes.ACTION_PREFIX, "RESET_PROVIDER_STATUS"),
      SET_CLOUD_PROVIDER: "".concat(_actionTypes.ACTION_PREFIX, "SET_CLOUD_PROVIDER"),
      POST_SAVE_LOAD_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "POST_SAVE_LOAD_SUCCESS"),
      LOAD_CLOUD_MAP: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP"),
      LOAD_CLOUD_MAP_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_SUCCESS"),
      LOAD_CLOUD_MAP_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_ERROR"),
      GET_SAVED_MAPS: "".concat(_actionTypes.ACTION_PREFIX, "GET_SAVED_MAPS"),
      GET_SAVED_MAPS_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "GET_SAVED_MAPS_SUCCESS"),
      GET_SAVED_MAPS_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "GET_SAVED_MAPS_ERROR")
    };
    exports.ActionTypes = ActionTypes;
    var exportFileToCloud = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_TO_CLOUD, function(payload) {
      return payload;
    });
    exports.exportFileToCloud = exportFileToCloud;
    var exportFileSuccess = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_SUCCESS, function(payload) {
      return payload;
    });
    exports.exportFileSuccess = exportFileSuccess;
    var exportFileError = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_ERROR, function(payload) {
      return payload;
    });
    exports.exportFileError = exportFileError;
    var postSaveLoadSuccess = (0, _reduxActions.createAction)(ActionTypes.POST_SAVE_LOAD_SUCCESS, function(message) {
      return message;
    });
    exports.postSaveLoadSuccess = postSaveLoadSuccess;
    var resetProviderStatus = (0, _reduxActions.createAction)(ActionTypes.RESET_PROVIDER_STATUS);
    exports.resetProviderStatus = resetProviderStatus;
    var setCloudProvider = (0, _reduxActions.createAction)(ActionTypes.SET_CLOUD_PROVIDER, function(provider) {
      return provider;
    });
    exports.setCloudProvider = setCloudProvider;
    var loadCloudMap = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP, function(payload) {
      return payload;
    });
    exports.loadCloudMap = loadCloudMap;
    var loadCloudMapSuccess = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP_SUCCESS, function(payload) {
      return payload;
    });
    exports.loadCloudMapSuccess = loadCloudMapSuccess;
    var loadCloudMapError = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP_ERROR, function(payload) {
      return payload;
    });
    exports.loadCloudMapError = loadCloudMapError;
    var getSavedMaps = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS, function(provider) {
      return provider;
    });
    exports.getSavedMaps = getSavedMaps;
    var getSavedMapsSuccess = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS_SUCCESS, function(payload) {
      return payload;
    });
    exports.getSavedMapsSuccess = getSavedMapsSuccess;
    var getSavedMapsError = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS_ERROR, function(payload) {
      return payload;
    });
    exports.getSavedMapsError = getSavedMapsError;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function _toPropertyKey(arg) {
      var key = toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty2(obj, key, value) {
      key = toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module.exports = _defineProperty2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/lodash.curry/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.curry/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var PLACEHOLDER = "__lodash_placeholder__";
    var BIND_FLAG = 1;
    var BIND_KEY_FLAG = 2;
    var CURRY_BOUND_FLAG = 4;
    var CURRY_FLAG = 8;
    var CURRY_RIGHT_FLAG = 16;
    var PARTIAL_FLAG = 32;
    var PARTIAL_RIGHT_FLAG = 64;
    var ARY_FLAG = 128;
    var REARG_FLAG = 256;
    var FLIP_FLAG = 512;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var wrapFlags = [
      ["ary", ARY_FLAG],
      ["bind", BIND_FLAG],
      ["bindKey", BIND_KEY_FLAG],
      ["curry", CURRY_FLAG],
      ["curryRight", CURRY_RIGHT_FLAG],
      ["flip", FLIP_FLAG],
      ["partial", PARTIAL_FLAG],
      ["partialRight", PARTIAL_RIGHT_FLAG],
      ["rearg", REARG_FLAG]
    ];
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reTrim = /^\s+|\s+$/g;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
    var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/;
    var reSplitDetails = /,? & /;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function countHolders(array, placeholder) {
      var length = array.length, result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          result++;
        }
      }
      return result;
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function replaceHolders(array, placeholder) {
      var index = -1, length = array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var objectCreate = Object.create;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var defineProperty = function() {
      var func = getNative(Object, "defineProperty"), name = getNative.name;
      return name && name.length > 2 ? func : void 0;
    }();
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG, Ctor = createCtor(func);
      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }
    function createCtor(Ctor) {
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
        return isObject(result) ? result : thisBinding;
      };
    }
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);
      function wrapper() {
        var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func,
            bitmask,
            createHybrid,
            wrapper.placeholder,
            void 0,
            args,
            holders,
            void 0,
            void 0,
            arity - length
          );
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG, isBind = bitmask & BIND_FLAG, isBindKey = bitmask & BIND_KEY_FLAG, isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG), isFlip = bitmask & FLIP_FLAG, Ctor = isBindKey ? void 0 : createCtor(func);
      function wrapper() {
        var length = arguments.length, args = Array(length), index = length;
        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func,
            bitmask,
            createHybrid,
            wrapper.placeholder,
            thisArg,
            args,
            newHolders,
            argPos,
            ary,
            arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG, Ctor = createCtor(func);
      function wrapper() {
        var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG, newHolders = isCurry ? holders : void 0, newHoldersRight = isCurry ? void 0 : holders, newPartials = isCurry ? partials : void 0, newPartialsRight = isCurry ? void 0 : partials;
      bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = void 0;
      }
      ary = ary === void 0 ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === void 0 ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials, holdersRight = holders;
        partials = holders = void 0;
      }
      var newData = [
        func,
        bitmask,
        thisArg,
        partials,
        holders,
        partialsRight,
        holdersRight,
        argPos,
        ary,
        arity
      ];
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(void 0, newData);
      }
      return setWrapToString(result, func, bitmask);
    }
    function getHolder(func) {
      var object = func;
      return object.placeholder;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }
    function insertWrapDetails(source, details) {
      var length = details.length, lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
      details = details.join(length > 2 ? ", " : " ");
      return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function reorder(array, indexes) {
      var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : void 0;
      }
      return array;
    }
    var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
      var source = reference + "";
      return defineProperty(wrapper, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
      });
    };
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = "_." + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }
    function curry2(func, arity, guard) {
      arity = guard ? void 0 : arity;
      var result = createWrap(func, CURRY_FLAG, void 0, void 0, void 0, void 0, void 0, arity);
      result.placeholder = curry2.placeholder;
      return result;
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    curry2.placeholder = {};
    module.exports = curry2;
  }
});

// node_modules/kepler.gl/dist/actions/action-wrapper.js
var require_action_wrapper = __commonJS({
  "node_modules/kepler.gl/dist/actions/action-wrapper.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports._updateProperty = exports.forwardTo = exports._actionFor = exports.unwrap = exports.isForwardAction = exports.wrapTo = exports.getActionForwardAddress = exports.ADDRESS_PREFIX = exports.FORWARD = void 0;
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _lodash = _interopRequireDefault(require_lodash());
    function ownKeys2(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys2(Object(source), true).forEach(function(key) {
            (0, _defineProperty2["default"])(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var FORWARD = "@redux-forward/FORWARD";
    exports.FORWARD = FORWARD;
    var ADDRESS_PREFIX = "@@KG_";
    exports.ADDRESS_PREFIX = ADDRESS_PREFIX;
    var getActionForwardAddress = function getActionForwardAddress2(id) {
      return "".concat(ADDRESS_PREFIX).concat(id.toUpperCase());
    };
    exports.getActionForwardAddress = getActionForwardAddress;
    var wrapTo = (0, _lodash["default"])(function(id, action) {
      return {
        // keep original action.type
        type: action.type,
        // actual action
        payload: _objectSpread2(_objectSpread2({}, action), {}, {
          meta: _objectSpread2(_objectSpread2({}, action.meta), {}, {
            _id_: id
          })
        }),
        // add forward signature to meta
        meta: _objectSpread2(_objectSpread2({}, action.meta || {}), {}, {
          _forward_: FORWARD,
          _addr_: getActionForwardAddress(id)
        })
      };
    });
    exports.wrapTo = wrapTo;
    var isForwardAction = function isForwardAction2(action) {
      return Boolean(action && action.meta && action.meta._forward_ === FORWARD);
    };
    exports.isForwardAction = isForwardAction;
    var unwrap = function unwrap2(action) {
      return isForwardAction(action) ? unwrap2(action.payload) : action;
    };
    exports.unwrap = unwrap;
    var _actionFor = function _actionFor2(id, action) {
      return isForwardAction(action) ? action.meta._addr_ === getActionForwardAddress(id) ? action.payload : {} : action;
    };
    exports._actionFor = _actionFor;
    var forwardTo = function forwardTo2(id, dispatch) {
      return function(action) {
        return dispatch(wrapTo(id, action));
      };
    };
    exports.forwardTo = forwardTo;
    var _updateProperty = function _updateProperty2(state, id, nextState) {
      return state[id] === nextState ? state : _objectSpread2(_objectSpread2({}, state), {}, (0, _defineProperty2["default"])({}, id, nextState));
    };
    exports._updateProperty = _updateProperty;
  }
});

export {
  require_interopRequireDefault,
  require_action_types,
  require_browser,
  es_exports,
  init_es2 as init_es,
  require_actions,
  require_vis_state_actions,
  require_ui_state_actions,
  require_map_style_actions,
  require_provider_actions,
  require_toPropertyKey,
  require_defineProperty,
  require_action_wrapper
};
//# sourceMappingURL=chunk-ASYFDB2V.js.map
