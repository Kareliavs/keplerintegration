{
  "version": 3,
  "sources": ["../../react-palm/tasks/core.js", "../../react-palm/tasks/legacy.js", "../../react-palm/tasks/global.js", "../../react-palm/tasks/redux.js", "../../react-palm/tasks/test-utils.js", "../../react-palm/tasks/index.js"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._run = _run;\nexports.fromPromise = fromPromise;\nexports.fromPromiseWithProgress = fromPromiseWithProgress;\nexports.fromCallback = fromCallback;\nexports.taskCreator_ = taskCreator_;\nexports.reportTasksForTesting = reportTasksForTesting;\nexports.all = all;\nexports.allSettled = allSettled;\n\n// A task that either returns, or errors\n// A function that does some side-effect when run.\n// A function that runs an effector for some environment.\n// In test, we provide one that doesn't call the effectful\n// function, instead providing a mock response.\n// Private API for running a task. Do not use this directly.\n// We need this because Task is an opaque type, and we\n// hide `.run` outside this file.\nfunction _run(task, fnApplication, success, error, context) {\n  if (typeof task.run !== 'function') {\n    throw new Error('Attempted to run something that is not a task.');\n  }\n\n  return task.run(fnApplication, success, error, context);\n}\n/*\n * A function that takes some Arg and returns a new task.\n */\n\n\n/**\n * ## `Task.fromCallback`\n * Returns a task-creator from a function that returns a promise.\n *\n * `arg => Promise<string[]>` -> `arg => Task<string[]>`.\n *\n * Uses the second arg as a label for debugging.\n */\nfunction fromPromise(fn, label) {\n  var creator = function creator(outbound) {\n    return taskCreator_(function (success, error) {\n      return fn(outbound).then(success, error);\n    }, outbound, label);\n  };\n\n  creator.type = label;\n  return creator;\n}\n\nvar noop = function noop() {};\n/**\n * ## `Task.fromCallbackWithProgress`\n * Returns a task-creator from a function that returns a promise.\n *\n * `({arg, onProgress}) => Promise<string[]>` -> `({arg, onProgress}) => Task<string[]>`.\n *\n * Uses the second arg as a label for debugging.\n */\n\n\nfunction fromPromiseWithProgress(fn, label) {\n  var creator = function creator(_ref) {\n    var arg = _ref.arg,\n        onProgress = _ref.onProgress;\n    var task = taskCreator_(function (success, error, context) {\n      return fn({\n        arg: arg,\n        onProgress: (context ? function (v) {\n          return context.onProgress(onProgress(v));\n        } : noop) || noop\n      }).then(success, error);\n    }, {\n      arg: arg,\n      onProgress: onProgress\n    }, label);\n    return task;\n  };\n\n  creator.type = label;\n  return creator;\n}\n/**\n * `Task.fromCallback`\n *\n * Turn a node-style callback function:\n *     `(arg, cb: (err, res) => void) => void`)\n * into a task creator of the same type.\n *\n * Uses the second arg as a label for debugging.\n */\n\n\nfunction fromCallback(fn, label) {\n  var creator = function creator(outbound) {\n    return taskCreator_(function (success, error) {\n      return fn(outbound, function (err, result) {\n        return err ? error(err) : success(result);\n      });\n    }, outbound, label);\n  };\n\n  creator.type = label;\n  return creator;\n}\n\n/*\n * This is the private constructor for creating a Task object. End users\n * probably want to use `Task.fromCallback` or `task.fromPromise`.\n * It adds instrumentation to the effector, and also attaches some info\n * useful for making assertions in test.\n */\nfunction taskCreator_(effector, payload, label) {\n  // Instrument the task with reporting\n  var effectorPrime = function effectorPrime(success, error, context) {\n    reportEffects('start', newTask, payload);\n    return effector(function (result) {\n      reportEffects('success', newTask, result);\n      return success(result);\n    }, function (reason) {\n      reportEffects('error', newTask, reason);\n      return error(reason);\n    }, context);\n  };\n\n  effectorPrime.payload = payload;\n  effectorPrime.type = label;\n\n  var newTask = _task(payload, function (runEffect, success, error, context) {\n    return runEffect(effectorPrime, success, error, context);\n  }, label);\n\n  return newTask;\n} // Internal task constructor.\n// Note that payload is only kept around for testing/debugging purposes\n// It should not be introspected outside of test\n\n\nfunction _task(payload, next, label) {\n  return {\n    label: label,\n    type: label,\n    payload: payload,\n\n    /*\n     * Given the effector (or a mock), kicks off the task.\n     * You (the end user) probably don't need to call this\n     * directly. The middleware should handle it.\n     */\n    run: next,\n\n    /*\n     * Public Task Methods\n     */\n    chain: chain,\n    map: map,\n    bimap: bimap\n  };\n\n  function map(successTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        return success(successTransform(result));\n      }, error, context);\n    }, label);\n  }\n\n  function bimap(successTransform, errorTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        return success(successTransform(result));\n      }, function (reason) {\n        return error(errorTransform(reason));\n      }, context);\n    }, label);\n  }\n\n  function chain(chainTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        var chainTask = chainTransform(result);\n        return chainTask.run(runEffect, success, error, context);\n      }, error, context);\n    }, \"Chain(\".concat(label, \")\"));\n  }\n}\n/*\n * Record the inputs/outputs of all tasks, for debugging or inspecting.\n * This feature should not be used to implement runtime behavior.\n */\n\n\nvar reportEffects = function reportEffects(event, task, payload) {};\n/**\n * ## `reportTasksForTesting`\n *\n * Takes a function that is called whenever a task is dispatched,\n * returns, or errors.\n *\n * Note that only one function can be registered with this hook.\n * The last provided function is the one that takes effect.\n */\n\n\nfunction reportTasksForTesting(fn) {\n  reportEffects = fn;\n} // type level utils functions needed for Task.all\n\n\n/*\n * ## `Task.all`\n *\n * Given an array of Tasks, returns a new task that runs all the effects\n * of the original in parallel, with an array result where each element\n * corresponds to a task.\n *\n * Acts like `Promise.all`.\n */\nfunction all(tasks) {\n  return _task(tasks.map(function (task) {\n    return task.payload;\n  }), function (runEffect, success, error, context) {\n    if (tasks.length === 0) {\n      return success([]);\n    }\n\n    var accumulated = Array(tasks.length);\n    var complete = 0;\n    var errorValue = null;\n\n    function allSuccess(index) {\n      return function (value) {\n        if (errorValue) {\n          return;\n        }\n\n        accumulated[index] = value;\n        complete += 1;\n\n        if (complete === tasks.length) {\n          return success(accumulated);\n        }\n      };\n    }\n\n    function anyError(err) {\n      if (!err) {\n        return;\n      }\n\n      errorValue = err;\n      return error(errorValue);\n    }\n\n    return Promise.all(tasks.map(function (task, index) {\n      return task.run(runEffect, allSuccess(index), anyError, context);\n    }));\n  }, 'Task.all(' + tasks.map(function (_ref2) {\n    var type = _ref2.type;\n    return type;\n  }).join(', ') + ')');\n}\n\n/*\n * ## `Task.allSettled`\n *\n * Given an array of Tasks, returns a new task that runs all the effects\n * of the original in parallel, with an array result where each element\n * corresponds to a task.\n *\n * Acts like `Promise.allSettled`.\n */\nfunction allSettled(tasks) {\n  return _task(tasks.map(function (task) {\n    return task.payload;\n  }), function (runEffect, success, error, context) {\n    if (tasks.length === 0) {\n      return success([]);\n    }\n\n    var accumulated = Array(tasks.length);\n    var complete = 0;\n\n    function onOneTaskFinish(index, status) {\n      return function (value) {\n        accumulated[index] = {\n          status: status,\n          value: value\n        };\n        complete += 1;\n\n        if (complete === tasks.length) {\n          return success(accumulated);\n        }\n      };\n    }\n\n    return Promise.allSettled(tasks.map(function (task, index) {\n      return task.run(runEffect, onOneTaskFinish(index, 'fulfilled'), onOneTaskFinish(index, 'rejected'), context);\n    }));\n  }, 'Task.allSettled(' + tasks.map(function (_ref3) {\n    var type = _ref3.type;\n    return type;\n  }).join(', ') + ')');\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.taskCreator = taskCreator;\n\nvar _core = require(\"./core\");\n\n/**\n * # Legacy APIs\n *\n * These are provided as a stop-gap to avoid breaking changes.\n * They are currently re-exported by default, but that will\n * probaby change in the future.\n */\n\n/**\n * ## `taskCreator`\n *\n * Given a function: `(arg, successCb, errorCb) => any`\n * Returns a task creator function: `(arg) => Task`.\n *\n * This API is a bit cumbersome.\n * You probably want to use `Task.fromCallback` or `Task.fromPromise` instead,\n * which do the same thing but with less boilerplate.\n */\nfunction taskCreator(fn, label) {\n  var creator = function creator(outbound) {\n    return (0, _core.taskCreator_)(function (success, error) {\n      return fn(outbound, success, error);\n    }, outbound, label);\n  };\n\n  creator.type = label;\n  return creator;\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGlobalTaskQueue = getGlobalTaskQueue;\nexports.updateGlobalTaskQueue = updateGlobalTaskQueue;\nexports.getLastWithTaskCall = getLastWithTaskCall;\nexports.setLastWithTaskCall = setLastWithTaskCall;\nexports.clearLastWithTaskCall = clearLastWithTaskCall;\n\n/**\n * For apps using Redux, we provide `withTasks` for `lift`ing tasks\n * out of a \"sub-reducer\" into the top-level app's space. This helps remove\n * extra plumbing that would potentially add boilerplate.\n *\n * To support this, we create a global record to collect tasks (and debug info).\n * Although this queue is global, we reset it between dispatches to the store.\n * You can think of this queue as a \"thread local.\"\n *\n * We also want to make sure that if multiple versions of react-palm are loaded,\n * that we're able to have just a single queue.\n *\n * End users should not use any of these APIs directly. Instead, use the\n * redux middleware.\n */\n// We attach an object to `window` or `global` with this name.\nvar GLOBAL_TASK_STATE = '___GLOBAL_TASK_STATE_e3b0c442';\n// Try to determine the object representing the global namespace.\nvar GLOBAL = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nif (typeof GLOBAL[GLOBAL_TASK_STATE] !== 'undefined') {\n  console.warn('More than one copy of react-palm was loaded. This may cause problems.');\n} else {\n  Object.defineProperty(GLOBAL, GLOBAL_TASK_STATE, {\n    ennumerable: false,\n    value: {\n      tasks: [],\n      lastWithTaskCall: null\n    }\n  });\n}\n/*\n * Getters and setters used by test utils and redux middlware.\n * Again, you probably don't need to ever use these directly.\n */\n\n\nfunction getGlobalTaskQueue() {\n  return GLOBAL[GLOBAL_TASK_STATE].tasks;\n}\n\nfunction updateGlobalTaskQueue(newQueue) {\n  GLOBAL[GLOBAL_TASK_STATE].tasks = newQueue;\n}\n\nfunction getLastWithTaskCall() {\n  return GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall;\n}\n\nfunction setLastWithTaskCall(last) {\n  GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall = last;\n}\n\nfunction clearLastWithTaskCall() {\n  GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall = null;\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withTasks = withTasks;\nexports.disableStackCapturing = disableStackCapturing;\nexports.withTask = exports.taskMiddleware = void 0;\n\nvar _core = require(\"./core\");\n\nvar _global = require(\"./global\");\n\nvar CACHED_PROMISE = Promise.resolve();\n\nvar makeDispatchAsync = function makeDispatchAsync(dispatch) {\n  return function (action) {\n    return CACHED_PROMISE.then(function () {\n      return dispatch(action);\n    });\n  };\n}; // The way webpack does hot-reloading seems to break the checks we\n// do against the stack trace.\n\n\nvar WEBPACK_HOT_RELOAD_ENABLED = Boolean(module.hot);\nvar enableStackCapture = !WEBPACK_HOT_RELOAD_ENABLED;\nvar IMPROPER_TASK_USAGE = \"Tasks should not be added outside of reducers.\";\n/**\n * You need to install this middleware for tasks to have their handlers run.\n *\n * You probably do not want to use this middleware within your test environment.\n * Instead, use `drainTasksForTesting` to retrieve and make assertions about them.\n *\n * This middleware changes the behavior of `store.dispatch` to return a promise.\n * That promise will resolve when all pending tasks for that call to `dispatch`\n * have finished (including calls transitively enqueued by tasks that dispatch actions).\n */\n\nvar taskMiddleware = function taskMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      // If we begin a call to dispatch with tasks still in the queue,\n      // we have a problem.\n      if (enableStackCapture && (0, _global.getGlobalTaskQueue)().length > 0) {\n        var err = (0, _global.getLastWithTaskCall)();\n        (0, _global.clearLastWithTaskCall)();\n        throw err;\n      }\n\n      next(action);\n      var dispatch = makeDispatchAsync(store.dispatch);\n\n      if ((0, _global.getGlobalTaskQueue)().length > 0) {\n        var taskResolutions = (0, _global.getGlobalTaskQueue)().map(runTaskActual(dispatch));\n        (0, _global.updateGlobalTaskQueue)([]);\n        (0, _global.clearLastWithTaskCall)();\n        return Promise.all(taskResolutions);\n      }\n\n      return CACHED_PROMISE;\n    };\n  };\n}; // Given a function that accepts two continuations (one for success, one for error),\n// call the function supplying the provided continuations.\n\n\nexports.taskMiddleware = taskMiddleware;\n\nvar biApply = function biApply(f, s, e, c) {\n  return f(s, e, c);\n}; // Run the task with the proper effect\n\n\nfunction runTaskActual(dispatch) {\n  return function (task) {\n    // unsafe coerce this because it doesn't matter\n    return (0, _core._run)(task, biApply, dispatch, dispatch, {\n      onProgress: dispatch\n    });\n  };\n}\n/**\n * Use this function in your reducer to add tasks to an action handler.\n * The task will be lifted up to the top of your app. Returns the same\n * state object passed into it.\n */\n\n\nfunction withTasks(state, tasks) {\n  if (enableStackCapture && !(0, _global.getLastWithTaskCall)()) {\n    (0, _global.setLastWithTaskCall)(trace(IMPROPER_TASK_USAGE));\n  }\n\n  (0, _global.updateGlobalTaskQueue)((0, _global.getGlobalTaskQueue)().concat(tasks instanceof Array ? tasks : [tasks]));\n  return state;\n}\n/**\n * A helpful alias for providing just one task.\n * `withTask(state, task1)` is the same as `withTasks(state, [task1])`.\n */\n\n\nvar withTask = withTasks;\n/**\n * In order to make it easy to track down incorrect uses for `withTask`, we capture exception\n * objects for every call to withTask. This has some performance overhead, so you'll\n * probably want to disable it in production.\n *\n * Note that if you're using Webpack's hot reload, we disable this functionality by default.\n */\n\nexports.withTask = withTask;\n\nfunction disableStackCapturing() {\n  enableStackCapture = false;\n}\n/*\n * Helpers\n */\n\n\nfunction trace(message) {\n  try {\n    throw new Error(message);\n  } catch (e) {\n    return e;\n  }\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.succeedTaskInTest = succeedTaskInTest;\nexports.errorTaskInTest = errorTaskInTest;\nexports.simulateTask = simulateTask;\nexports.succeedTaskWithValues = succeedTaskWithValues;\nexports.drainTasksForTesting = drainTasksForTesting;\n\nvar _core = require(\"./core\");\n\nvar _global = require(\"./global\");\n\n/**\n * Get the resulting value of a task, providing the given value as the inbound result.\n * If your task uses `.chain` or `Task.all`, you probably want to use `simulateTask`\n * or `succeedTaskWithValues` instead.\n */\nfunction succeedTaskInTest(someTask, value) {\n  return _runAndCaptureResult(someTask, function (_, s, _e) {\n    return s(value);\n  });\n}\n/**\n * Get the failure value of a task, providing the given value as the inbound error.\n *\n * If your task uses `.chain` or `Task.all`, you probably want to use `simulateTask`\n * instead.\n */\n\n\nfunction errorTaskInTest(someTask, value) {\n  return _runAndCaptureResult(someTask, function (_, _s, e) {\n    return e(value);\n  });\n}\n/**\n * Run a task, using `simulator` for bi-application. `simulator` recieves:\n *\n * 1. an object representing a side-effect with `payload` and `type`.\n * 2. a success handler to call with a mocked response.\n * 3. an error handler to call with a mocked out response.\n *\n * A simulator might be called more than once in the case of `Task.all`\n * or `task.chain`.\n */\n\n\nfunction simulateTask(someTask, simulator) {\n  return _runAndCaptureResult(someTask, simulator);\n}\n/**\n * Given some task, and array of values,\n */\n\n\nfunction succeedTaskWithValues(someTask, values) {\n  var index = 0;\n  return _runAndCaptureResult(someTask, function (_, s) {\n    if (index >= values.length) {\n      throw new Error('Not enough values were provided!');\n    }\n\n    var returned = s(values[index]);\n    index += 1;\n    return returned;\n  });\n}\n/**\n * This function should only be used in test environments to make assertions about\n * tasks as part of the test. Application code should not be mucking around with\n * the list of tasks.\n *\n * If you want to display information about tasks in your component,\n * add that information to your state tree when you create the task.\n *\n * If you want to get access to the current tasks, do so by returning the\n * tasks from helpers, and inspecting them before passing them to `withTask`.\n */\n\n\nfunction drainTasksForTesting() {\n  var drained = (0, _global.getGlobalTaskQueue)();\n  (0, _global.updateGlobalTaskQueue)([]);\n  (0, _global.clearLastWithTaskCall)();\n  return drained;\n}\n\nfunction _runAndCaptureResult(someTask, simulator) {\n  var returned;\n\n  var setReturned = function setReturned(val) {\n    returned = val;\n  };\n\n  (0, _core._run)(someTask, simulator, setReturned, setReturned);\n\n  if (typeof returned === 'undefined') {\n    throw new Error('A success or error handler was never called!');\n  }\n\n  return returned;\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  reportTasksForTesting: true,\n  taskCreator: true,\n  taskMiddleware: true,\n  withTask: true,\n  withTasks: true,\n  disableStackCapturing: true,\n  getGlobalTaskQueue: true\n};\nObject.defineProperty(exports, \"reportTasksForTesting\", {\n  enumerable: true,\n  get: function get() {\n    return _core.reportTasksForTesting;\n  }\n});\nObject.defineProperty(exports, \"taskCreator\", {\n  enumerable: true,\n  get: function get() {\n    return _legacy.taskCreator;\n  }\n});\nObject.defineProperty(exports, \"taskMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _redux.taskMiddleware;\n  }\n});\nObject.defineProperty(exports, \"withTask\", {\n  enumerable: true,\n  get: function get() {\n    return _redux.withTask;\n  }\n});\nObject.defineProperty(exports, \"withTasks\", {\n  enumerable: true,\n  get: function get() {\n    return _redux.withTasks;\n  }\n});\nObject.defineProperty(exports, \"disableStackCapturing\", {\n  enumerable: true,\n  get: function get() {\n    return _redux.disableStackCapturing;\n  }\n});\nObject.defineProperty(exports, \"getGlobalTaskQueue\", {\n  enumerable: true,\n  get: function get() {\n    return _global.getGlobalTaskQueue;\n  }\n});\nexports.default = void 0;\n\nvar _core = require(\"./core\");\n\nvar _legacy = require(\"./legacy\");\n\nvar _redux = require(\"./redux\");\n\nvar _global = require(\"./global\");\n\nvar _testUtils = require(\"./test-utils\");\n\nObject.keys(_testUtils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _testUtils[key];\n    }\n  });\n});\n// In the future, test utils will not be exported from\n// this main bundle\n// This default export provides a nice alias:\n// ```\n// import Task from 'react-palm/tasks';\n// Task.all([...])\n// ```\nvar _default = {\n  all: _core.all,\n  allSettled: _core.allSettled,\n  fromCallback: _core.fromCallback,\n  fromPromise: _core.fromPromise,\n  fromPromiseWithProgress: _core.fromPromiseWithProgress\n};\nexports.default = _default;"],
  "mappings": "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",
  "names": ["creator", "noop", "effectorPrime", "reportEffects", "creator", "makeDispatchAsync", "taskMiddleware", "biApply", "setReturned"]
}
